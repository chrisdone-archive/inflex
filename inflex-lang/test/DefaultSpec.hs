{-# LANGUAGE GADTs #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Check defaulting works as expected, and fails as expected.

module DefaultSpec where

import           Data.List.NonEmpty (NonEmpty(..))
import           Data.Map.Strict (Map)
import qualified Data.Sequence as Seq
import           Data.Text (Text)
import           Inflex.Defaulter
import           Inflex.Types
import           Test.Hspec

defaultText' :: (e~ ()) =>
     Map Hash (Either e (Scheme Polymorphic))
  -> FilePath
  -> Text
  -> Either (ResolverDefaulterError e) Cell
defaultText' = defaultText

spec :: Spec
spec = do
  spec_1
  spec_1_0
  spec_1_plus_1_0
  spec_lambda
  spec_table_nums

spec_1 :: SpecWith ()
spec_1 =
  it
    "1"
    (shouldBe
       (defaultText' mempty "" "0")
       (Right (Cell {location = AutogeneratedCursor, defaulted = ApplyExpression (Apply {location = AutoInsertedForDefaulterCursor, function = LambdaExpression (Lambda {location = ImplicitArgumentFor AutogeneratedCursor, param = Param {location = ImplicitArgumentFor AutogeneratedCursor, name = (), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}, body = ApplyExpression (Apply {location = AutogeneratedCursor, function = ApplyExpression (Apply {location = ImplicitlyApplicationOn AutogeneratedCursor, function = GlobalExpression (Global {location = AutogeneratedCursor, name = FromIntegerGlobal, scheme = ResolvedScheme (ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = FunctionTypeName}), argument = ConstantType (TypeConstant {location = AutogeneratedCursor, name = IntegerTypeName}), location = AutogeneratedCursor, kind = FunKind TypeKind TypeKind}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = AutogeneratedCursor, kind = TypeKind}))}), argument = VariableExpression (Variable {location = ImplicitArgumentFor AutogeneratedCursor, name = DeBrujinIndex (DeBrujinNesting 0), typ = ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = FunctionTypeName}), argument = ConstantType (TypeConstant {location = AutogeneratedCursor, name = IntegerTypeName}), location = AutogeneratedCursor, kind = FunKind TypeKind TypeKind}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = AutogeneratedCursor, kind = TypeKind})}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), argument = LiteralExpression (NumberLiteral (Number {location = ExpressionCursor, number = IntegerNumber 0, typ = ConstantType (TypeConstant {location = ExpressionCursor, name = IntegerTypeName})})), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), argument = GlobalExpression (Global {location = AutoInsertedForDefaulterCursor, name = InstanceGlobal FromIntegerIntegerInstance, scheme = ResolvedScheme (ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = FunctionTypeName}), argument = ConstantType (TypeConstant {location = BuiltIn, name = IntegerTypeName}), location = BuiltIn, kind = FunKind TypeKind TypeKind}), argument = ConstantType (TypeConstant {location = BuiltIn, name = IntegerTypeName}), location = BuiltIn, kind = TypeKind}))}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), scheme = Scheme {location = AutogeneratedCursor, constraints = [], typ = ConstantType (TypeConstant {location = DefaultedCursor, name = IntegerTypeName})}, defaultedClassConstraints = Seq.fromList [Default {classConstraintDefaulted = ClassConstraint {className = FromIntegerClassName, typ = ConstantType (TypeConstant {location = DefaultedCursor, name = IntegerTypeName}) :| [], location = AutogeneratedCursor}, classConstraintOriginal = ClassConstraint {className = FromIntegerClassName, typ = VariableType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}) :| [], location = AutogeneratedCursor}, instanceName = FromIntegerIntegerInstance}], ambiguousClassConstraints = mempty})))

spec_table_nums :: SpecWith ()
spec_table_nums =
  it
    "table nums"
    (pendingWith "Check what exactly this generates."
     {-shouldBe
       (defaultText' mempty "" "map(r:r.x*r.y,[{x:3,y:2.0}])")
       (Right
          (Cell
             { location = ExpressionCursor
             , defaulted =
                 ApplyExpression
                   (Apply
                      { location = AutoInsertedForDefaulterCursor
                      , function =
                          LambdaExpression
                            (Lambda
                               { location =
                                   ImplicitArgumentFor AutogeneratedCursor
                               , param =
                                   Param
                                     { location =
                                         ImplicitArgumentFor AutogeneratedCursor
                                     , name = ()
                                     , typ =
                                         ArrayType
                                           (PolyType
                                              (TypeVariable
                                                 { location = ()
                                                 , prefix = ()
                                                 , index = 0
                                                 , kind = TypeKind
                                                 }))
                                     }
                               , body =
                                   ApplyExpression
                                     (Apply
                                        { location =
                                            AutoInsertedForDefaulterCursor
                                        , function =
                                            LambdaExpression
                                              (Lambda
                                                 { location =
                                                     ImplicitArgumentFor
                                                       (ApplyFuncCursor
                                                          (ApplyArgCursor
                                                             (LambdaBodyCursor
                                                                (InfixOpCursor
                                                                   ExpressionCursor))))
                                                 , param =
                                                     Param
                                                       { location =
                                                           ImplicitArgumentFor
                                                             (ApplyFuncCursor
                                                                (ApplyArgCursor
                                                                   (LambdaBodyCursor
                                                                      (InfixOpCursor
                                                                         ExpressionCursor))))
                                                       , name = ()
                                                       , typ =
                                                           ArrayType
                                                             (PolyType
                                                                (TypeVariable
                                                                   { location =
                                                                       ()
                                                                   , prefix = ()
                                                                   , index = 0
                                                                   , kind =
                                                                       TypeKind
                                                                   }))
                                                       }
                                                 , body =
                                                     ApplyExpression
                                                       (Apply
                                                          { location =
                                                              ExpressionCursor
                                                          , function =
                                                              ApplyExpression
                                                                (Apply
                                                                   { location =
                                                                       ApplyFuncCursor
                                                                         ExpressionCursor
                                                                   , function =
                                                                       GlobalExpression
                                                                         (Global
                                                                            { location =
                                                                                ApplyFuncCursor
                                                                                  (ApplyFuncCursor
                                                                                     ExpressionCursor)
                                                                            , name =
                                                                                FunctionGlobal
                                                                                  MapFunction
                                                                            , scheme =
                                                                                ResolvedScheme
                                                                                  (ApplyType
                                                                                     (TypeApplication
                                                                                        { function =
                                                                                            ApplyType
                                                                                              (TypeApplication
                                                                                                 { function =
                                                                                                     ConstantType
                                                                                                       (TypeConstant
                                                                                                          { location =
                                                                                                              BuiltIn
                                                                                                          , name =
                                                                                                              FunctionTypeName
                                                                                                          })
                                                                                                 , argument =
                                                                                                     ApplyType
                                                                                                       (TypeApplication
                                                                                                          { function =
                                                                                                              ApplyType
                                                                                                                (TypeApplication
                                                                                                                   { function =
                                                                                                                       ConstantType
                                                                                                                         (TypeConstant
                                                                                                                            { location =
                                                                                                                                BuiltIn
                                                                                                                            , name =
                                                                                                                                FunctionTypeName
                                                                                                                            })
                                                                                                                   , argument =
                                                                                                                       RecordType
                                                                                                                         (RowType
                                                                                                                            (TypeRow
                                                                                                                               { location =
                                                                                                                                   ApplyFuncCursor
                                                                                                                                     (ApplyArgCursor
                                                                                                                                        (LambdaBodyCursor
                                                                                                                                           (InfixLeftCursor
                                                                                                                                              ExpressionCursor)))
                                                                                                                               , typeVariable =
                                                                                                                                   Nothing
                                                                                                                               , fields =
                                                                                                                                   [ Field
                                                                                                                                       { location =
                                                                                                                                           ApplyFuncCursor
                                                                                                                                             (ApplyArgCursor
                                                                                                                                                (LambdaBodyCursor
                                                                                                                                                   (InfixLeftCursor
                                                                                                                                                      ExpressionCursor)))
                                                                                                                                       , name =
                                                                                                                                           FieldName
                                                                                                                                             { unFieldName =
                                                                                                                                                 "x"
                                                                                                                                             }
                                                                                                                                       , typ =
                                                                                                                                           PolyType
                                                                                                                                             (TypeVariable
                                                                                                                                                { location =
                                                                                                                                                    ()
                                                                                                                                                , prefix =
                                                                                                                                                    ()
                                                                                                                                                , index =
                                                                                                                                                    0
                                                                                                                                                , kind =
                                                                                                                                                    TypeKind
                                                                                                                                                })
                                                                                                                                       }
                                                                                                                                   , Field
                                                                                                                                       { location =
                                                                                                                                           ApplyArgCursor
                                                                                                                                             (ArrayElementCursor
                                                                                                                                                0
                                                                                                                                                (RecordFieldCursor
                                                                                                                                                   (FieldName
                                                                                                                                                      { unFieldName =
                                                                                                                                                          "y"
                                                                                                                                                      })
                                                                                                                                                   TypeCursor))
                                                                                                                                       , name =
                                                                                                                                           FieldName
                                                                                                                                             { unFieldName =
                                                                                                                                                 "y"
                                                                                                                                             }
                                                                                                                                       , typ =
                                                                                                                                           VariableType
                                                                                                                                             (TypeVariable
                                                                                                                                                { location =
                                                                                                                                                    ApplyArgCursor
                                                                                                                                                      (ArrayElementCursor
                                                                                                                                                         0
                                                                                                                                                         (RecordFieldCursor
                                                                                                                                                            (FieldName
                                                                                                                                                               { unFieldName =
                                                                                                                                                                   "y"
                                                                                                                                                               })
                                                                                                                                                            (RowFieldExpression
                                                                                                                                                               ExpressionCursor)))
                                                                                                                                                , prefix =
                                                                                                                                                    ApplyPrefix
                                                                                                                                                , index =
                                                                                                                                                    17
                                                                                                                                                , kind =
                                                                                                                                                    TypeKind
                                                                                                                                                })
                                                                                                                                       }
                                                                                                                                   ]
                                                                                                                               }))
                                                                                                                   , location =
                                                                                                                       BuiltIn
                                                                                                                   , kind =
                                                                                                                       FunKind
                                                                                                                         TypeKind
                                                                                                                         TypeKind
                                                                                                                   })
                                                                                                          , argument =
                                                                                                              PolyType
                                                                                                                (TypeVariable
                                                                                                                   { location =
                                                                                                                       ()
                                                                                                                   , prefix =
                                                                                                                       ()
                                                                                                                   , index =
                                                                                                                       0
                                                                                                                   , kind =
                                                                                                                       TypeKind
                                                                                                                   })
                                                                                                          , location =
                                                                                                              BuiltIn
                                                                                                          , kind =
                                                                                                              TypeKind
                                                                                                          })
                                                                                                 , location =
                                                                                                     BuiltIn
                                                                                                 , kind =
                                                                                                     FunKind
                                                                                                       TypeKind
                                                                                                       TypeKind
                                                                                                 })
                                                                                        , argument =
                                                                                            ApplyType
                                                                                              (TypeApplication
                                                                                                 { function =
                                                                                                     ApplyType
                                                                                                       (TypeApplication
                                                                                                          { function =
                                                                                                              ConstantType
                                                                                                                (TypeConstant
                                                                                                                   { location =
                                                                                                                       BuiltIn
                                                                                                                   , name =
                                                                                                                       FunctionTypeName
                                                                                                                   })
                                                                                                          , argument =
                                                                                                              ArrayType
                                                                                                                (RecordType
                                                                                                                   (RowType
                                                                                                                      (TypeRow
                                                                                                                         { location =
                                                                                                                             ApplyFuncCursor
                                                                                                                               (ApplyArgCursor
                                                                                                                                  (LambdaBodyCursor
                                                                                                                                     (InfixLeftCursor
                                                                                                                                        ExpressionCursor)))
                                                                                                                         , typeVariable =
                                                                                                                             Nothing
                                                                                                                         , fields =
                                                                                                                             [ Field
                                                                                                                                 { location =
                                                                                                                                     ApplyFuncCursor
                                                                                                                                       (ApplyArgCursor
                                                                                                                                          (LambdaBodyCursor
                                                                                                                                             (InfixLeftCursor
                                                                                                                                                ExpressionCursor)))
                                                                                                                                 , name =
                                                                                                                                     FieldName
                                                                                                                                       { unFieldName =
                                                                                                                                           "x"
                                                                                                                                       }
                                                                                                                                 , typ =
                                                                                                                                     PolyType
                                                                                                                                       (TypeVariable
                                                                                                                                          { location =
                                                                                                                                              ()
                                                                                                                                          , prefix =
                                                                                                                                              ()
                                                                                                                                          , index =
                                                                                                                                              0
                                                                                                                                          , kind =
                                                                                                                                              TypeKind
                                                                                                                                          })
                                                                                                                                 }
                                                                                                                             , Field
                                                                                                                                 { location =
                                                                                                                                     ApplyArgCursor
                                                                                                                                       (ArrayElementCursor
                                                                                                                                          0
                                                                                                                                          (RecordFieldCursor
                                                                                                                                             (FieldName
                                                                                                                                                { unFieldName =
                                                                                                                                                    "y"
                                                                                                                                                })
                                                                                                                                             TypeCursor))
                                                                                                                                 , name =
                                                                                                                                     FieldName
                                                                                                                                       { unFieldName =
                                                                                                                                           "y"
                                                                                                                                       }
                                                                                                                                 , typ =
                                                                                                                                     VariableType
                                                                                                                                       (TypeVariable
                                                                                                                                          { location =
                                                                                                                                              ApplyArgCursor
                                                                                                                                                (ArrayElementCursor
                                                                                                                                                   0
                                                                                                                                                   (RecordFieldCursor
                                                                                                                                                      (FieldName
                                                                                                                                                         { unFieldName =
                                                                                                                                                             "y"
                                                                                                                                                         })
                                                                                                                                                      (RowFieldExpression
                                                                                                                                                         ExpressionCursor)))
                                                                                                                                          , prefix =
                                                                                                                                              ApplyPrefix
                                                                                                                                          , index =
                                                                                                                                              17
                                                                                                                                          , kind =
                                                                                                                                              TypeKind
                                                                                                                                          })
                                                                                                                                 }
                                                                                                                             ]
                                                                                                                         })))
                                                                                                          , location =
                                                                                                              BuiltIn
                                                                                                          , kind =
                                                                                                              FunKind
                                                                                                                TypeKind
                                                                                                                TypeKind
                                                                                                          })
                                                                                                 , argument =
                                                                                                     ArrayType
                                                                                                       (PolyType
                                                                                                          (TypeVariable
                                                                                                             { location =
                                                                                                                 ()
                                                                                                             , prefix =
                                                                                                                 ()
                                                                                                             , index =
                                                                                                                 0
                                                                                                             , kind =
                                                                                                                 TypeKind
                                                                                                             }))
                                                                                                 , location =
                                                                                                     BuiltIn
                                                                                                 , kind =
                                                                                                     TypeKind
                                                                                                 })
                                                                                        , location =
                                                                                            BuiltIn
                                                                                        , kind =
                                                                                            TypeKind
                                                                                        }))
                                                                            })
                                                                   , argument =
                                                                       LambdaExpression
                                                                         (Lambda
                                                                            { location =
                                                                                ApplyFuncCursor
                                                                                  (ApplyArgCursor
                                                                                     ExpressionCursor)
                                                                            , param =
                                                                                Param
                                                                                  { location =
                                                                                      ApplyFuncCursor
                                                                                        (ApplyArgCursor
                                                                                           LambdaParamCursor)
                                                                                  , name =
                                                                                      ()
                                                                                  , typ =
                                                                                      RecordType
                                                                                        (RowType
                                                                                           (TypeRow
                                                                                              { location =
                                                                                                  ApplyFuncCursor
                                                                                                    (ApplyArgCursor
                                                                                                       (LambdaBodyCursor
                                                                                                          (InfixLeftCursor
                                                                                                             ExpressionCursor)))
                                                                                              , typeVariable =
                                                                                                  Nothing
                                                                                              , fields =
                                                                                                  [ Field
                                                                                                      { location =
                                                                                                          ApplyFuncCursor
                                                                                                            (ApplyArgCursor
                                                                                                               (LambdaBodyCursor
                                                                                                                  (InfixLeftCursor
                                                                                                                     ExpressionCursor)))
                                                                                                      , name =
                                                                                                          FieldName
                                                                                                            { unFieldName =
                                                                                                                "x"
                                                                                                            }
                                                                                                      , typ =
                                                                                                          PolyType
                                                                                                            (TypeVariable
                                                                                                               { location =
                                                                                                                   ()
                                                                                                               , prefix =
                                                                                                                   ()
                                                                                                               , index =
                                                                                                                   0
                                                                                                               , kind =
                                                                                                                   TypeKind
                                                                                                               })
                                                                                                      }
                                                                                                  , Field
                                                                                                      { location =
                                                                                                          ApplyArgCursor
                                                                                                            (ArrayElementCursor
                                                                                                               0
                                                                                                               (RecordFieldCursor
                                                                                                                  (FieldName
                                                                                                                     { unFieldName =
                                                                                                                         "y"
                                                                                                                     })
                                                                                                                  TypeCursor))
                                                                                                      , name =
                                                                                                          FieldName
                                                                                                            { unFieldName =
                                                                                                                "y"
                                                                                                            }
                                                                                                      , typ =
                                                                                                          VariableType
                                                                                                            (TypeVariable
                                                                                                               { location =
                                                                                                                   ApplyArgCursor
                                                                                                                     (ArrayElementCursor
                                                                                                                        0
                                                                                                                        (RecordFieldCursor
                                                                                                                           (FieldName
                                                                                                                              { unFieldName =
                                                                                                                                  "y"
                                                                                                                              })
                                                                                                                           (RowFieldExpression
                                                                                                                              ExpressionCursor)))
                                                                                                               , prefix =
                                                                                                                   ApplyPrefix
                                                                                                               , index =
                                                                                                                   17
                                                                                                               , kind =
                                                                                                                   TypeKind
                                                                                                               })
                                                                                                      }
                                                                                                  ]
                                                                                              }))
                                                                                  }
                                                                            , body =
                                                                                InfixExpression
                                                                                  (Infix
                                                                                     { location =
                                                                                         ApplyFuncCursor
                                                                                           (ApplyArgCursor
                                                                                              (LambdaBodyCursor
                                                                                                 ExpressionCursor))
                                                                                     , global =
                                                                                         ApplyExpression
                                                                                           (Apply
                                                                                              { location =
                                                                                                  ImplicitlyApplicationOn
                                                                                                    (ApplyFuncCursor
                                                                                                       (ApplyArgCursor
                                                                                                          (LambdaBodyCursor
                                                                                                             (InfixOpCursor
                                                                                                                ExpressionCursor))))
                                                                                              , function =
                                                                                                  GlobalExpression
                                                                                                    (Global
                                                                                                       { location =
                                                                                                           ApplyFuncCursor
                                                                                                             (ApplyArgCursor
                                                                                                                (LambdaBodyCursor
                                                                                                                   (InfixOpCursor
                                                                                                                      ExpressionCursor)))
                                                                                                       , name =
                                                                                                           NumericBinOpGlobal
                                                                                                             MulitplyOp
                                                                                                       , scheme =
                                                                                                           ResolvedScheme
                                                                                                             (ApplyType
                                                                                                                (TypeApplication
                                                                                                                   { function =
                                                                                                                       ApplyType
                                                                                                                         (TypeApplication
                                                                                                                            { function =
                                                                                                                                ConstantType
                                                                                                                                  (TypeConstant
                                                                                                                                     { location =
                                                                                                                                         ApplyFuncCursor
                                                                                                                                           (ApplyArgCursor
                                                                                                                                              (LambdaBodyCursor
                                                                                                                                                 (InfixOpCursor
                                                                                                                                                    ExpressionCursor)))
                                                                                                                                     , name =
                                                                                                                                         FunctionTypeName
                                                                                                                                     })
                                                                                                                            , argument =
                                                                                                                                PolyType
                                                                                                                                  (TypeVariable
                                                                                                                                     { location =
                                                                                                                                         ()
                                                                                                                                     , prefix =
                                                                                                                                         ()
                                                                                                                                     , index =
                                                                                                                                         0
                                                                                                                                     , kind =
                                                                                                                                         TypeKind
                                                                                                                                     })
                                                                                                                            , location =
                                                                                                                                ApplyFuncCursor
                                                                                                                                  (ApplyArgCursor
                                                                                                                                     (LambdaBodyCursor
                                                                                                                                        (InfixOpCursor
                                                                                                                                           ExpressionCursor)))
                                                                                                                            , kind =
                                                                                                                                TypeKind
                                                                                                                            })
                                                                                                                   , argument =
                                                                                                                       PolyType
                                                                                                                         (TypeVariable
                                                                                                                            { location =
                                                                                                                                ()
                                                                                                                            , prefix =
                                                                                                                                ()
                                                                                                                            , index =
                                                                                                                                0
                                                                                                                            , kind =
                                                                                                                                TypeKind
                                                                                                                            })
                                                                                                                   , location =
                                                                                                                       ApplyFuncCursor
                                                                                                                         (ApplyArgCursor
                                                                                                                            (LambdaBodyCursor
                                                                                                                               (InfixOpCursor
                                                                                                                                  ExpressionCursor)))
                                                                                                                   , kind =
                                                                                                                       TypeKind
                                                                                                                   }))
                                                                                                       })
                                                                                              , argument =
                                                                                                  VariableExpression
                                                                                                    (Variable
                                                                                                       { location =
                                                                                                           ImplicitArgumentFor
                                                                                                             (ApplyFuncCursor
                                                                                                                (ApplyArgCursor
                                                                                                                   (LambdaBodyCursor
                                                                                                                      (InfixOpCursor
                                                                                                                         ExpressionCursor))))
                                                                                                       , name =
                                                                                                           DeBrujinIndex
                                                                                                             (DeBrujinNesting
                                                                                                                1)
                                                                                                       , typ =
                                                                                                           ApplyType
                                                                                                             (TypeApplication
                                                                                                                { function =
                                                                                                                    ApplyType
                                                                                                                      (TypeApplication
                                                                                                                         { function =
                                                                                                                             ConstantType
                                                                                                                               (TypeConstant
                                                                                                                                  { location =
                                                                                                                                      ApplyFuncCursor
                                                                                                                                        (ApplyArgCursor
                                                                                                                                           (LambdaBodyCursor
                                                                                                                                              (InfixOpCursor
                                                                                                                                                 ExpressionCursor)))
                                                                                                                                  , name =
                                                                                                                                      FunctionTypeName
                                                                                                                                  })
                                                                                                                         , argument =
                                                                                                                             PolyType
                                                                                                                               (TypeVariable
                                                                                                                                  { location =
                                                                                                                                      ()
                                                                                                                                  , prefix =
                                                                                                                                      ()
                                                                                                                                  , index =
                                                                                                                                      0
                                                                                                                                  , kind =
                                                                                                                                      TypeKind
                                                                                                                                  })
                                                                                                                         , location =
                                                                                                                             ApplyFuncCursor
                                                                                                                               (ApplyArgCursor
                                                                                                                                  (LambdaBodyCursor
                                                                                                                                     (InfixOpCursor
                                                                                                                                        ExpressionCursor)))
                                                                                                                         , kind =
                                                                                                                             TypeKind
                                                                                                                         })
                                                                                                                , argument =
                                                                                                                    PolyType
                                                                                                                      (TypeVariable
                                                                                                                         { location =
                                                                                                                             ()
                                                                                                                         , prefix =
                                                                                                                             ()
                                                                                                                         , index =
                                                                                                                             0
                                                                                                                         , kind =
                                                                                                                             TypeKind
                                                                                                                         })
                                                                                                                , location =
                                                                                                                    ApplyFuncCursor
                                                                                                                      (ApplyArgCursor
                                                                                                                         (LambdaBodyCursor
                                                                                                                            (InfixOpCursor
                                                                                                                               ExpressionCursor)))
                                                                                                                , kind =
                                                                                                                    TypeKind
                                                                                                                })
                                                                                                       })
                                                                                              , typ =
                                                                                                  PolyType
                                                                                                    (TypeVariable
                                                                                                       { location =
                                                                                                           ()
                                                                                                       , prefix =
                                                                                                           ()
                                                                                                       , index =
                                                                                                           0
                                                                                                       , kind =
                                                                                                           TypeKind
                                                                                                       })
                                                                                              })
                                                                                     , left =
                                                                                         PropExpression
                                                                                           (Prop
                                                                                              { expression =
                                                                                                  VariableExpression
                                                                                                    (Variable
                                                                                                       { location =
                                                                                                           ApplyFuncCursor
                                                                                                             (ApplyArgCursor
                                                                                                                (LambdaBodyCursor
                                                                                                                   (InfixLeftCursor
                                                                                                                      (PropExpressionCursor
                                                                                                                         ExpressionCursor))))
                                                                                                       , name =
                                                                                                           DeBrujinIndex
                                                                                                             (DeBrujinNesting
                                                                                                                0)
                                                                                                       , typ =
                                                                                                           RecordType
                                                                                                             (RowType
                                                                                                                (TypeRow
                                                                                                                   { location =
                                                                                                                       ApplyFuncCursor
                                                                                                                         (ApplyArgCursor
                                                                                                                            (LambdaBodyCursor
                                                                                                                               (InfixLeftCursor
                                                                                                                                  ExpressionCursor)))
                                                                                                                   , typeVariable =
                                                                                                                       Nothing
                                                                                                                   , fields =
                                                                                                                       [ Field
                                                                                                                           { location =
                                                                                                                               ApplyFuncCursor
                                                                                                                                 (ApplyArgCursor
                                                                                                                                    (LambdaBodyCursor
                                                                                                                                       (InfixLeftCursor
                                                                                                                                          ExpressionCursor)))
                                                                                                                           , name =
                                                                                                                               FieldName
                                                                                                                                 { unFieldName =
                                                                                                                                     "x"
                                                                                                                                 }
                                                                                                                           , typ =
                                                                                                                               PolyType
                                                                                                                                 (TypeVariable
                                                                                                                                    { location =
                                                                                                                                        ()
                                                                                                                                    , prefix =
                                                                                                                                        ()
                                                                                                                                    , index =
                                                                                                                                        0
                                                                                                                                    , kind =
                                                                                                                                        TypeKind
                                                                                                                                    })
                                                                                                                           }
                                                                                                                       , Field
                                                                                                                           { location =
                                                                                                                               ApplyArgCursor
                                                                                                                                 (ArrayElementCursor
                                                                                                                                    0
                                                                                                                                    (RecordFieldCursor
                                                                                                                                       (FieldName
                                                                                                                                          { unFieldName =
                                                                                                                                              "y"
                                                                                                                                          })
                                                                                                                                       TypeCursor))
                                                                                                                           , name =
                                                                                                                               FieldName
                                                                                                                                 { unFieldName =
                                                                                                                                     "y"
                                                                                                                                 }
                                                                                                                           , typ =
                                                                                                                               VariableType
                                                                                                                                 (TypeVariable
                                                                                                                                    { location =
                                                                                                                                        ApplyArgCursor
                                                                                                                                          (ArrayElementCursor
                                                                                                                                             0
                                                                                                                                             (RecordFieldCursor
                                                                                                                                                (FieldName
                                                                                                                                                   { unFieldName =
                                                                                                                                                       "y"
                                                                                                                                                   })
                                                                                                                                                (RowFieldExpression
                                                                                                                                                   ExpressionCursor)))
                                                                                                                                    , prefix =
                                                                                                                                        ApplyPrefix
                                                                                                                                    , index =
                                                                                                                                        17
                                                                                                                                    , kind =
                                                                                                                                        TypeKind
                                                                                                                                    })
                                                                                                                           }
                                                                                                                       ]
                                                                                                                   }))
                                                                                                       })
                                                                                              , name =
                                                                                                  FieldName
                                                                                                    { unFieldName =
                                                                                                        "x"
                                                                                                    }
                                                                                              , typ =
                                                                                                  PolyType
                                                                                                    (TypeVariable
                                                                                                       { location =
                                                                                                           ()
                                                                                                       , prefix =
                                                                                                           ()
                                                                                                       , index =
                                                                                                           0
                                                                                                       , kind =
                                                                                                           TypeKind
                                                                                                       })
                                                                                              , location =
                                                                                                  ApplyFuncCursor
                                                                                                    (ApplyArgCursor
                                                                                                       (LambdaBodyCursor
                                                                                                          (InfixLeftCursor
                                                                                                             ExpressionCursor)))
                                                                                              })
                                                                                     , right =
                                                                                         PropExpression
                                                                                           (Prop
                                                                                              { expression =
                                                                                                  VariableExpression
                                                                                                    (Variable
                                                                                                       { location =
                                                                                                           ApplyFuncCursor
                                                                                                             (ApplyArgCursor
                                                                                                                (LambdaBodyCursor
                                                                                                                   (InfixRightCursor
                                                                                                                      (PropExpressionCursor
                                                                                                                         ExpressionCursor))))
                                                                                                       , name =
                                                                                                           DeBrujinIndex
                                                                                                             (DeBrujinNesting
                                                                                                                0)
                                                                                                       , typ =
                                                                                                           RecordType
                                                                                                             (RowType
                                                                                                                (TypeRow
                                                                                                                   { location =
                                                                                                                       ApplyFuncCursor
                                                                                                                         (ApplyArgCursor
                                                                                                                            (LambdaBodyCursor
                                                                                                                               (InfixLeftCursor
                                                                                                                                  ExpressionCursor)))
                                                                                                                   , typeVariable =
                                                                                                                       Nothing
                                                                                                                   , fields =
                                                                                                                       [ Field
                                                                                                                           { location =
                                                                                                                               ApplyFuncCursor
                                                                                                                                 (ApplyArgCursor
                                                                                                                                    (LambdaBodyCursor
                                                                                                                                       (InfixLeftCursor
                                                                                                                                          ExpressionCursor)))
                                                                                                                           , name =
                                                                                                                               FieldName
                                                                                                                                 { unFieldName =
                                                                                                                                     "x"
                                                                                                                                 }
                                                                                                                           , typ =
                                                                                                                               PolyType
                                                                                                                                 (TypeVariable
                                                                                                                                    { location =
                                                                                                                                        ()
                                                                                                                                    , prefix =
                                                                                                                                        ()
                                                                                                                                    , index =
                                                                                                                                        0
                                                                                                                                    , kind =
                                                                                                                                        TypeKind
                                                                                                                                    })
                                                                                                                           }
                                                                                                                       , Field
                                                                                                                           { location =
                                                                                                                               ApplyArgCursor
                                                                                                                                 (ArrayElementCursor
                                                                                                                                    0
                                                                                                                                    (RecordFieldCursor
                                                                                                                                       (FieldName
                                                                                                                                          { unFieldName =
                                                                                                                                              "y"
                                                                                                                                          })
                                                                                                                                       TypeCursor))
                                                                                                                           , name =
                                                                                                                               FieldName
                                                                                                                                 { unFieldName =
                                                                                                                                     "y"
                                                                                                                                 }
                                                                                                                           , typ =
                                                                                                                               VariableType
                                                                                                                                 (TypeVariable
                                                                                                                                    { location =
                                                                                                                                        ApplyArgCursor
                                                                                                                                          (ArrayElementCursor
                                                                                                                                             0
                                                                                                                                             (RecordFieldCursor
                                                                                                                                                (FieldName
                                                                                                                                                   { unFieldName =
                                                                                                                                                       "y"
                                                                                                                                                   })
                                                                                                                                                (RowFieldExpression
                                                                                                                                                   ExpressionCursor)))
                                                                                                                                    , prefix =
                                                                                                                                        ApplyPrefix
                                                                                                                                    , index =
                                                                                                                                        17
                                                                                                                                    , kind =
                                                                                                                                        TypeKind
                                                                                                                                    })
                                                                                                                           }
                                                                                                                       ]
                                                                                                                   }))
                                                                                                       })
                                                                                              , name =
                                                                                                  FieldName
                                                                                                    { unFieldName =
                                                                                                        "y"
                                                                                                    }
                                                                                              , typ =
                                                                                                  PolyType
                                                                                                    (TypeVariable
                                                                                                       { location =
                                                                                                           ()
                                                                                                       , prefix =
                                                                                                           ()
                                                                                                       , index =
                                                                                                           0
                                                                                                       , kind =
                                                                                                           TypeKind
                                                                                                       })
                                                                                              , location =
                                                                                                  ApplyFuncCursor
                                                                                                    (ApplyArgCursor
                                                                                                       (LambdaBodyCursor
                                                                                                          (InfixRightCursor
                                                                                                             ExpressionCursor)))
                                                                                              })
                                                                                     , typ =
                                                                                         PolyType
                                                                                           (TypeVariable
                                                                                              { location =
                                                                                                  ()
                                                                                              , prefix =
                                                                                                  ()
                                                                                              , index =
                                                                                                  0
                                                                                              , kind =
                                                                                                  TypeKind
                                                                                              })
                                                                                     })
                                                                            , typ =
                                                                                ApplyType
                                                                                  (TypeApplication
                                                                                     { function =
                                                                                         ApplyType
                                                                                           (TypeApplication
                                                                                              { function =
                                                                                                  ConstantType
                                                                                                    (TypeConstant
                                                                                                       { location =
                                                                                                           ApplyFuncCursor
                                                                                                             (ApplyArgCursor
                                                                                                                ExpressionCursor)
                                                                                                       , name =
                                                                                                           FunctionTypeName
                                                                                                       })
                                                                                              , argument =
                                                                                                  RecordType
                                                                                                    (RowType
                                                                                                       (TypeRow
                                                                                                          { location =
                                                                                                              ApplyFuncCursor
                                                                                                                (ApplyArgCursor
                                                                                                                   (LambdaBodyCursor
                                                                                                                      (InfixLeftCursor
                                                                                                                         ExpressionCursor)))
                                                                                                          , typeVariable =
                                                                                                              Nothing
                                                                                                          , fields =
                                                                                                              [ Field
                                                                                                                  { location =
                                                                                                                      ApplyFuncCursor
                                                                                                                        (ApplyArgCursor
                                                                                                                           (LambdaBodyCursor
                                                                                                                              (InfixLeftCursor
                                                                                                                                 ExpressionCursor)))
                                                                                                                  , name =
                                                                                                                      FieldName
                                                                                                                        { unFieldName =
                                                                                                                            "x"
                                                                                                                        }
                                                                                                                  , typ =
                                                                                                                      PolyType
                                                                                                                        (TypeVariable
                                                                                                                           { location =
                                                                                                                               ()
                                                                                                                           , prefix =
                                                                                                                               ()
                                                                                                                           , index =
                                                                                                                               0
                                                                                                                           , kind =
                                                                                                                               TypeKind
                                                                                                                           })
                                                                                                                  }
                                                                                                              , Field
                                                                                                                  { location =
                                                                                                                      ApplyArgCursor
                                                                                                                        (ArrayElementCursor
                                                                                                                           0
                                                                                                                           (RecordFieldCursor
                                                                                                                              (FieldName
                                                                                                                                 { unFieldName =
                                                                                                                                     "y"
                                                                                                                                 })
                                                                                                                              TypeCursor))
                                                                                                                  , name =
                                                                                                                      FieldName
                                                                                                                        { unFieldName =
                                                                                                                            "y"
                                                                                                                        }
                                                                                                                  , typ =
                                                                                                                      VariableType
                                                                                                                        (TypeVariable
                                                                                                                           { location =
                                                                                                                               ApplyArgCursor
                                                                                                                                 (ArrayElementCursor
                                                                                                                                    0
                                                                                                                                    (RecordFieldCursor
                                                                                                                                       (FieldName
                                                                                                                                          { unFieldName =
                                                                                                                                              "y"
                                                                                                                                          })
                                                                                                                                       (RowFieldExpression
                                                                                                                                          ExpressionCursor)))
                                                                                                                           , prefix =
                                                                                                                               ApplyPrefix
                                                                                                                           , index =
                                                                                                                               17
                                                                                                                           , kind =
                                                                                                                               TypeKind
                                                                                                                           })
                                                                                                                  }
                                                                                                              ]
                                                                                                          }))
                                                                                              , location =
                                                                                                  ApplyFuncCursor
                                                                                                    (ApplyArgCursor
                                                                                                       ExpressionCursor)
                                                                                              , kind =
                                                                                                  FunKind
                                                                                                    TypeKind
                                                                                                    TypeKind
                                                                                              })
                                                                                     , argument =
                                                                                         PolyType
                                                                                           (TypeVariable
                                                                                              { location =
                                                                                                  ()
                                                                                              , prefix =
                                                                                                  ()
                                                                                              , index =
                                                                                                  0
                                                                                              , kind =
                                                                                                  TypeKind
                                                                                              })
                                                                                     , location =
                                                                                         ApplyFuncCursor
                                                                                           (ApplyArgCursor
                                                                                              ExpressionCursor)
                                                                                     , kind =
                                                                                         TypeKind
                                                                                     })
                                                                            })
                                                                   , typ =
                                                                       ApplyType
                                                                         (TypeApplication
                                                                            { function =
                                                                                ApplyType
                                                                                  (TypeApplication
                                                                                     { function =
                                                                                         ConstantType
                                                                                           (TypeConstant
                                                                                              { location =
                                                                                                  BuiltIn
                                                                                              , name =
                                                                                                  FunctionTypeName
                                                                                              })
                                                                                     , argument =
                                                                                         ArrayType
                                                                                           (RecordType
                                                                                              (RowType
                                                                                                 (TypeRow
                                                                                                    { location =
                                                                                                        ApplyFuncCursor
                                                                                                          (ApplyArgCursor
                                                                                                             (LambdaBodyCursor
                                                                                                                (InfixLeftCursor
                                                                                                                   ExpressionCursor)))
                                                                                                    , typeVariable =
                                                                                                        Nothing
                                                                                                    , fields =
                                                                                                        [ Field
                                                                                                            { location =
                                                                                                                ApplyFuncCursor
                                                                                                                  (ApplyArgCursor
                                                                                                                     (LambdaBodyCursor
                                                                                                                        (InfixLeftCursor
                                                                                                                           ExpressionCursor)))
                                                                                                            , name =
                                                                                                                FieldName
                                                                                                                  { unFieldName =
                                                                                                                      "x"
                                                                                                                  }
                                                                                                            , typ =
                                                                                                                PolyType
                                                                                                                  (TypeVariable
                                                                                                                     { location =
                                                                                                                         ()
                                                                                                                     , prefix =
                                                                                                                         ()
                                                                                                                     , index =
                                                                                                                         0
                                                                                                                     , kind =
                                                                                                                         TypeKind
                                                                                                                     })
                                                                                                            }
                                                                                                        , Field
                                                                                                            { location =
                                                                                                                ApplyArgCursor
                                                                                                                  (ArrayElementCursor
                                                                                                                     0
                                                                                                                     (RecordFieldCursor
                                                                                                                        (FieldName
                                                                                                                           { unFieldName =
                                                                                                                               "y"
                                                                                                                           })
                                                                                                                        TypeCursor))
                                                                                                            , name =
                                                                                                                FieldName
                                                                                                                  { unFieldName =
                                                                                                                      "y"
                                                                                                                  }
                                                                                                            , typ =
                                                                                                                VariableType
                                                                                                                  (TypeVariable
                                                                                                                     { location =
                                                                                                                         ApplyArgCursor
                                                                                                                           (ArrayElementCursor
                                                                                                                              0
                                                                                                                              (RecordFieldCursor
                                                                                                                                 (FieldName
                                                                                                                                    { unFieldName =
                                                                                                                                        "y"
                                                                                                                                    })
                                                                                                                                 (RowFieldExpression
                                                                                                                                    ExpressionCursor)))
                                                                                                                     , prefix =
                                                                                                                         ApplyPrefix
                                                                                                                     , index =
                                                                                                                         17
                                                                                                                     , kind =
                                                                                                                         TypeKind
                                                                                                                     })
                                                                                                            }
                                                                                                        ]
                                                                                                    })))
                                                                                     , location =
                                                                                         BuiltIn
                                                                                     , kind =
                                                                                         FunKind
                                                                                           TypeKind
                                                                                           TypeKind
                                                                                     })
                                                                            , argument =
                                                                                ArrayType
                                                                                  (PolyType
                                                                                     (TypeVariable
                                                                                        { location =
                                                                                            ()
                                                                                        , prefix =
                                                                                            ()
                                                                                        , index =
                                                                                            0
                                                                                        , kind =
                                                                                            TypeKind
                                                                                        }))
                                                                            , location =
                                                                                BuiltIn
                                                                            , kind =
                                                                                TypeKind
                                                                            })
                                                                   })
                                                          , argument =
                                                              ArrayExpression
                                                                (Array
                                                                   { expressions =
                                                                       [ RecordExpression
                                                                           (Record
                                                                              { fields =
                                                                                  [ FieldE
                                                                                      { name =
                                                                                          FieldName
                                                                                            { unFieldName =
                                                                                                "x"
                                                                                            }
                                                                                      , expression =
                                                                                          ApplyExpression
                                                                                            (Apply
                                                                                               { location =
                                                                                                   AutogeneratedCursor
                                                                                               , function =
                                                                                                   ApplyExpression
                                                                                                     (Apply
                                                                                                        { location =
                                                                                                            ImplicitlyApplicationOn
                                                                                                              AutogeneratedCursor
                                                                                                        , function =
                                                                                                            GlobalExpression
                                                                                                              (Global
                                                                                                                 { location =
                                                                                                                     AutogeneratedCursor
                                                                                                                 , name =
                                                                                                                     FromIntegerGlobal
                                                                                                                 , scheme =
                                                                                                                     ResolvedScheme
                                                                                                                       (ApplyType
                                                                                                                          (TypeApplication
                                                                                                                             { function =
                                                                                                                                 ApplyType
                                                                                                                                   (TypeApplication
                                                                                                                                      { function =
                                                                                                                                          ConstantType
                                                                                                                                            (TypeConstant
                                                                                                                                               { location =
                                                                                                                                                   AutogeneratedCursor
                                                                                                                                               , name =
                                                                                                                                                   FunctionTypeName
                                                                                                                                               })
                                                                                                                                      , argument =
                                                                                                                                          ConstantType
                                                                                                                                            (TypeConstant
                                                                                                                                               { location =
                                                                                                                                                   AutogeneratedCursor
                                                                                                                                               , name =
                                                                                                                                                   IntegerTypeName
                                                                                                                                               })
                                                                                                                                      , location =
                                                                                                                                          AutogeneratedCursor
                                                                                                                                      , kind =
                                                                                                                                          FunKind
                                                                                                                                            TypeKind
                                                                                                                                            TypeKind
                                                                                                                                      })
                                                                                                                             , argument =
                                                                                                                                 PolyType
                                                                                                                                   (TypeVariable
                                                                                                                                      { location =
                                                                                                                                          ()
                                                                                                                                      , prefix =
                                                                                                                                          ()
                                                                                                                                      , index =
                                                                                                                                          0
                                                                                                                                      , kind =
                                                                                                                                          TypeKind
                                                                                                                                      })
                                                                                                                             , location =
                                                                                                                                 AutogeneratedCursor
                                                                                                                             , kind =
                                                                                                                                 TypeKind
                                                                                                                             }))
                                                                                                                 })
                                                                                                        , argument =
                                                                                                            VariableExpression
                                                                                                              (Variable
                                                                                                                 { location =
                                                                                                                     ImplicitArgumentFor
                                                                                                                       AutogeneratedCursor
                                                                                                                 , name =
                                                                                                                     DeBrujinIndex
                                                                                                                       (DeBrujinNesting
                                                                                                                          1)
                                                                                                                 , typ =
                                                                                                                     ApplyType
                                                                                                                       (TypeApplication
                                                                                                                          { function =
                                                                                                                              ApplyType
                                                                                                                                (TypeApplication
                                                                                                                                   { function =
                                                                                                                                       ConstantType
                                                                                                                                         (TypeConstant
                                                                                                                                            { location =
                                                                                                                                                AutogeneratedCursor
                                                                                                                                            , name =
                                                                                                                                                FunctionTypeName
                                                                                                                                            })
                                                                                                                                   , argument =
                                                                                                                                       ConstantType
                                                                                                                                         (TypeConstant
                                                                                                                                            { location =
                                                                                                                                                AutogeneratedCursor
                                                                                                                                            , name =
                                                                                                                                                IntegerTypeName
                                                                                                                                            })
                                                                                                                                   , location =
                                                                                                                                       AutogeneratedCursor
                                                                                                                                   , kind =
                                                                                                                                       FunKind
                                                                                                                                         TypeKind
                                                                                                                                         TypeKind
                                                                                                                                   })
                                                                                                                          , argument =
                                                                                                                              PolyType
                                                                                                                                (TypeVariable
                                                                                                                                   { location =
                                                                                                                                       ()
                                                                                                                                   , prefix =
                                                                                                                                       ()
                                                                                                                                   , index =
                                                                                                                                       0
                                                                                                                                   , kind =
                                                                                                                                       TypeKind
                                                                                                                                   })
                                                                                                                          , location =
                                                                                                                              AutogeneratedCursor
                                                                                                                          , kind =
                                                                                                                              TypeKind
                                                                                                                          })
                                                                                                                 })
                                                                                                        , typ =
                                                                                                            PolyType
                                                                                                              (TypeVariable
                                                                                                                 { location =
                                                                                                                     ()
                                                                                                                 , prefix =
                                                                                                                     ()
                                                                                                                 , index =
                                                                                                                     0
                                                                                                                 , kind =
                                                                                                                     TypeKind
                                                                                                                 })
                                                                                                        })
                                                                                               , argument =
                                                                                                   LiteralExpression
                                                                                                     (NumberLiteral
                                                                                                        (Number
                                                                                                           { location =
                                                                                                               ApplyArgCursor
                                                                                                                 (ArrayElementCursor
                                                                                                                    0
                                                                                                                    (RecordFieldCursor
                                                                                                                       (FieldName
                                                                                                                          { unFieldName =
                                                                                                                              "x"
                                                                                                                          })
                                                                                                                       (RowFieldExpression
                                                                                                                          ExpressionCursor)))
                                                                                                           , number =
                                                                                                               IntegerNumber
                                                                                                                 3
                                                                                                           , typ =
                                                                                                               ConstantType
                                                                                                                 (TypeConstant
                                                                                                                    { location =
                                                                                                                        ApplyArgCursor
                                                                                                                          (ArrayElementCursor
                                                                                                                             0
                                                                                                                             (RecordFieldCursor
                                                                                                                                (FieldName
                                                                                                                                   { unFieldName =
                                                                                                                                       "x"
                                                                                                                                   })
                                                                                                                                (RowFieldExpression
                                                                                                                                   ExpressionCursor)))
                                                                                                                    , name =
                                                                                                                        IntegerTypeName
                                                                                                                    })
                                                                                                           }))
                                                                                               , typ =
                                                                                                   PolyType
                                                                                                     (TypeVariable
                                                                                                        { location =
                                                                                                            ()
                                                                                                        , prefix =
                                                                                                            ()
                                                                                                        , index =
                                                                                                            0
                                                                                                        , kind =
                                                                                                            TypeKind
                                                                                                        })
                                                                                               })
                                                                                      , location =
                                                                                          ApplyArgCursor
                                                                                            (ArrayElementCursor
                                                                                               0
                                                                                               (RecordFieldCursor
                                                                                                  (FieldName
                                                                                                     { unFieldName =
                                                                                                         "x"
                                                                                                     })
                                                                                                  TypeCursor))
                                                                                      }
                                                                                  , FieldE
                                                                                      { name =
                                                                                          FieldName
                                                                                            { unFieldName =
                                                                                                "y"
                                                                                            }
                                                                                      , expression =
                                                                                          ApplyExpression
                                                                                            (Apply
                                                                                               { location =
                                                                                                   AutogeneratedCursor
                                                                                               , function =
                                                                                                   ApplyExpression
                                                                                                     (Apply
                                                                                                        { location =
                                                                                                            ImplicitlyApplicationOn
                                                                                                              AutogeneratedCursor
                                                                                                        , function =
                                                                                                            GlobalExpression
                                                                                                              (Global
                                                                                                                 { location =
                                                                                                                     AutogeneratedCursor
                                                                                                                 , name =
                                                                                                                     FromDecimalGlobal
                                                                                                                 , scheme =
                                                                                                                     ResolvedScheme
                                                                                                                       (ApplyType
                                                                                                                          (TypeApplication
                                                                                                                             { function =
                                                                                                                                 ApplyType
                                                                                                                                   (TypeApplication
                                                                                                                                      { function =
                                                                                                                                          ConstantType
                                                                                                                                            (TypeConstant
                                                                                                                                               { location =
                                                                                                                                                   AutogeneratedCursor
                                                                                                                                               , name =
                                                                                                                                                   FunctionTypeName
                                                                                                                                               })
                                                                                                                                      , argument =
                                                                                                                                          ApplyType
                                                                                                                                            (TypeApplication
                                                                                                                                               { function =
                                                                                                                                                   ConstantType
                                                                                                                                                     (TypeConstant
                                                                                                                                                        { location =
                                                                                                                                                            AutogeneratedCursor
                                                                                                                                                        , name =
                                                                                                                                                            DecimalTypeName
                                                                                                                                                        })
                                                                                                                                               , argument =
                                                                                                                                                   ConstantType
                                                                                                                                                     (TypeConstant
                                                                                                                                                        { location =
                                                                                                                                                            ApplyArgCursor
                                                                                                                                                              (ArrayElementCursor
                                                                                                                                                                 0
                                                                                                                                                                 (RecordFieldCursor
                                                                                                                                                                    (FieldName
                                                                                                                                                                       { unFieldName =
                                                                                                                                                                           "y"
                                                                                                                                                                       })
                                                                                                                                                                    (RowFieldExpression
                                                                                                                                                                       ExpressionCursor)))
                                                                                                                                                        , name =
                                                                                                                                                            NatTypeName
                                                                                                                                                              1
                                                                                                                                                        })
                                                                                                                                               , location =
                                                                                                                                                   AutogeneratedCursor
                                                                                                                                               , kind =
                                                                                                                                                   TypeKind
                                                                                                                                               })
                                                                                                                                      , location =
                                                                                                                                          AutogeneratedCursor
                                                                                                                                      , kind =
                                                                                                                                          FunKind
                                                                                                                                            TypeKind
                                                                                                                                            TypeKind
                                                                                                                                      })
                                                                                                                             , argument =
                                                                                                                                 VariableType
                                                                                                                                   (TypeVariable
                                                                                                                                      { location =
                                                                                                                                          ApplyArgCursor
                                                                                                                                            (ArrayElementCursor
                                                                                                                                               0
                                                                                                                                               (RecordFieldCursor
                                                                                                                                                  (FieldName
                                                                                                                                                     { unFieldName =
                                                                                                                                                         "y"
                                                                                                                                                     })
                                                                                                                                                  (RowFieldExpression
                                                                                                                                                     ExpressionCursor)))
                                                                                                                                      , prefix =
                                                                                                                                          ApplyPrefix
                                                                                                                                      , index =
                                                                                                                                          17
                                                                                                                                      , kind =
                                                                                                                                          TypeKind
                                                                                                                                      })
                                                                                                                             , location =
                                                                                                                                 AutogeneratedCursor
                                                                                                                             , kind =
                                                                                                                                 TypeKind
                                                                                                                             }))
                                                                                                                 })
                                                                                                        , argument =
                                                                                                            GlobalExpression
                                                                                                              (Global
                                                                                                                 { location =
                                                                                                                     ImplicitArgumentFor
                                                                                                                       AutogeneratedCursor
                                                                                                                 , name =
                                                                                                                     InstanceGlobal
                                                                                                                       (FromDecimalDecimalInstance
                                                                                                                          (FromDecimalInstance
                                                                                                                             { supersetPlaces =
                                                                                                                                 1
                                                                                                                             , subsetPlaces =
                                                                                                                                 1
                                                                                                                             }))
                                                                                                                 , scheme =
                                                                                                                     ResolvedScheme
                                                                                                                       (ApplyType
                                                                                                                          (TypeApplication
                                                                                                                             { function =
                                                                                                                                 ApplyType
                                                                                                                                   (TypeApplication
                                                                                                                                      { function =
                                                                                                                                          ConstantType
                                                                                                                                            (TypeConstant
                                                                                                                                               { location =
                                                                                                                                                   BuiltIn
                                                                                                                                               , name =
                                                                                                                                                   FunctionTypeName
                                                                                                                                               })
                                                                                                                                      , argument =
                                                                                                                                          ApplyType
                                                                                                                                            (TypeApplication
                                                                                                                                               { function =
                                                                                                                                                   ConstantType
                                                                                                                                                     (TypeConstant
                                                                                                                                                        { location =
                                                                                                                                                            BuiltIn
                                                                                                                                                        , name =
                                                                                                                                                            DecimalTypeName
                                                                                                                                                        })
                                                                                                                                               , argument =
                                                                                                                                                   ConstantType
                                                                                                                                                     (TypeConstant
                                                                                                                                                        { location =
                                                                                                                                                            BuiltIn
                                                                                                                                                        , name =
                                                                                                                                                            NatTypeName
                                                                                                                                                              1
                                                                                                                                                        })
                                                                                                                                               , location =
                                                                                                                                                   BuiltIn
                                                                                                                                               , kind =
                                                                                                                                                   TypeKind
                                                                                                                                               })
                                                                                                                                      , location =
                                                                                                                                          BuiltIn
                                                                                                                                      , kind =
                                                                                                                                          FunKind
                                                                                                                                            TypeKind
                                                                                                                                            TypeKind
                                                                                                                                      })
                                                                                                                             , argument =
                                                                                                                                 ApplyType
                                                                                                                                   (TypeApplication
                                                                                                                                      { function =
                                                                                                                                          ConstantType
                                                                                                                                            (TypeConstant
                                                                                                                                               { location =
                                                                                                                                                   BuiltIn
                                                                                                                                               , name =
                                                                                                                                                   DecimalTypeName
                                                                                                                                               })
                                                                                                                                      , argument =
                                                                                                                                          ConstantType
                                                                                                                                            (TypeConstant
                                                                                                                                               { location =
                                                                                                                                                   BuiltIn
                                                                                                                                               , name =
                                                                                                                                                   NatTypeName
                                                                                                                                                     1
                                                                                                                                               })
                                                                                                                                      , location =
                                                                                                                                          BuiltIn
                                                                                                                                      , kind =
                                                                                                                                          TypeKind
                                                                                                                                      })
                                                                                                                             , location =
                                                                                                                                 BuiltIn
                                                                                                                             , kind =
                                                                                                                                 TypeKind
                                                                                                                             }))
                                                                                                                 })
                                                                                                        , typ =
                                                                                                            VariableType
                                                                                                              (TypeVariable
                                                                                                                 { location =
                                                                                                                     ApplyArgCursor
                                                                                                                       (ArrayElementCursor
                                                                                                                          0
                                                                                                                          (RecordFieldCursor
                                                                                                                             (FieldName
                                                                                                                                { unFieldName =
                                                                                                                                    "y"
                                                                                                                                })
                                                                                                                             (RowFieldExpression
                                                                                                                                ExpressionCursor)))
                                                                                                                 , prefix =
                                                                                                                     ApplyPrefix
                                                                                                                 , index =
                                                                                                                     17
                                                                                                                 , kind =
                                                                                                                     TypeKind
                                                                                                                 })
                                                                                                        })
                                                                                               , argument =
                                                                                                   LiteralExpression
                                                                                                     (NumberLiteral
                                                                                                        (Number
                                                                                                           { location =
                                                                                                               ApplyArgCursor
                                                                                                                 (ArrayElementCursor
                                                                                                                    0
                                                                                                                    (RecordFieldCursor
                                                                                                                       (FieldName
                                                                                                                          { unFieldName =
                                                                                                                              "y"
                                                                                                                          })
                                                                                                                       (RowFieldExpression
                                                                                                                          ExpressionCursor)))
                                                                                                           , number =
                                                                                                               DecimalNumber
                                                                                                                 (Decimal
                                                                                                                    { places =
                                                                                                                        1
                                                                                                                    , integer =
                                                                                                                        20
                                                                                                                    })
                                                                                                           , typ =
                                                                                                               ApplyType
                                                                                                                 (TypeApplication
                                                                                                                    { function =
                                                                                                                        ConstantType
                                                                                                                          (TypeConstant
                                                                                                                             { location =
                                                                                                                                 ApplyArgCursor
                                                                                                                                   (ArrayElementCursor
                                                                                                                                      0
                                                                                                                                      (RecordFieldCursor
                                                                                                                                         (FieldName
                                                                                                                                            { unFieldName =
                                                                                                                                                "y"
                                                                                                                                            })
                                                                                                                                         (RowFieldExpression
                                                                                                                                            ExpressionCursor)))
                                                                                                                             , name =
                                                                                                                                 DecimalTypeName
                                                                                                                             })
                                                                                                                    , argument =
                                                                                                                        ConstantType
                                                                                                                          (TypeConstant
                                                                                                                             { location =
                                                                                                                                 ApplyArgCursor
                                                                                                                                   (ArrayElementCursor
                                                                                                                                      0
                                                                                                                                      (RecordFieldCursor
                                                                                                                                         (FieldName
                                                                                                                                            { unFieldName =
                                                                                                                                                "y"
                                                                                                                                            })
                                                                                                                                         (RowFieldExpression
                                                                                                                                            ExpressionCursor)))
                                                                                                                             , name =
                                                                                                                                 NatTypeName
                                                                                                                                   1
                                                                                                                             })
                                                                                                                    , location =
                                                                                                                        ApplyArgCursor
                                                                                                                          (ArrayElementCursor
                                                                                                                             0
                                                                                                                             (RecordFieldCursor
                                                                                                                                (FieldName
                                                                                                                                   { unFieldName =
                                                                                                                                       "y"
                                                                                                                                   })
                                                                                                                                (RowFieldExpression
                                                                                                                                   ExpressionCursor)))
                                                                                                                    , kind =
                                                                                                                        TypeKind
                                                                                                                    })
                                                                                                           }))
                                                                                               , typ =
                                                                                                   VariableType
                                                                                                     (TypeVariable
                                                                                                        { location =
                                                                                                            ApplyArgCursor
                                                                                                              (ArrayElementCursor
                                                                                                                 0
                                                                                                                 (RecordFieldCursor
                                                                                                                    (FieldName
                                                                                                                       { unFieldName =
                                                                                                                           "y"
                                                                                                                       })
                                                                                                                    (RowFieldExpression
                                                                                                                       ExpressionCursor)))
                                                                                                        , prefix =
                                                                                                            ApplyPrefix
                                                                                                        , index =
                                                                                                            17
                                                                                                        , kind =
                                                                                                            TypeKind
                                                                                                        })
                                                                                               })
                                                                                      , location =
                                                                                          ApplyArgCursor
                                                                                            (ArrayElementCursor
                                                                                               0
                                                                                               (RecordFieldCursor
                                                                                                  (FieldName
                                                                                                     { unFieldName =
                                                                                                         "y"
                                                                                                     })
                                                                                                  TypeCursor))
                                                                                      }
                                                                                  ]
                                                                              , location =
                                                                                  ApplyArgCursor
                                                                                    (ArrayElementCursor
                                                                                       0
                                                                                       ExpressionCursor)
                                                                              , typ =
                                                                                  RecordType
                                                                                    (RowType
                                                                                       (TypeRow
                                                                                          { location =
                                                                                              ApplyArgCursor
                                                                                                (ArrayElementCursor
                                                                                                   0
                                                                                                   ExpressionCursor)
                                                                                          , typeVariable =
                                                                                              Nothing
                                                                                          , fields =
                                                                                              [ Field
                                                                                                  { location =
                                                                                                      ApplyArgCursor
                                                                                                        (ArrayElementCursor
                                                                                                           0
                                                                                                           (RecordFieldCursor
                                                                                                              (FieldName
                                                                                                                 { unFieldName =
                                                                                                                     "x"
                                                                                                                 })
                                                                                                              TypeCursor))
                                                                                                  , name =
                                                                                                      FieldName
                                                                                                        { unFieldName =
                                                                                                            "x"
                                                                                                        }
                                                                                                  , typ =
                                                                                                      PolyType
                                                                                                        (TypeVariable
                                                                                                           { location =
                                                                                                               ()
                                                                                                           , prefix =
                                                                                                               ()
                                                                                                           , index =
                                                                                                               0
                                                                                                           , kind =
                                                                                                               TypeKind
                                                                                                           })
                                                                                                  }
                                                                                              , Field
                                                                                                  { location =
                                                                                                      ApplyArgCursor
                                                                                                        (ArrayElementCursor
                                                                                                           0
                                                                                                           (RecordFieldCursor
                                                                                                              (FieldName
                                                                                                                 { unFieldName =
                                                                                                                     "y"
                                                                                                                 })
                                                                                                              TypeCursor))
                                                                                                  , name =
                                                                                                      FieldName
                                                                                                        { unFieldName =
                                                                                                            "y"
                                                                                                        }
                                                                                                  , typ =
                                                                                                      VariableType
                                                                                                        (TypeVariable
                                                                                                           { location =
                                                                                                               ApplyArgCursor
                                                                                                                 (ArrayElementCursor
                                                                                                                    0
                                                                                                                    (RecordFieldCursor
                                                                                                                       (FieldName
                                                                                                                          { unFieldName =
                                                                                                                              "y"
                                                                                                                          })
                                                                                                                       (RowFieldExpression
                                                                                                                          ExpressionCursor)))
                                                                                                           , prefix =
                                                                                                               ApplyPrefix
                                                                                                           , index =
                                                                                                               17
                                                                                                           , kind =
                                                                                                               TypeKind
                                                                                                           })
                                                                                                  }
                                                                                              ]
                                                                                          }))
                                                                              })
                                                                       ]
                                                                   , typ =
                                                                       ArrayType
                                                                         (RecordType
                                                                            (RowType
                                                                               (TypeRow
                                                                                  { location =
                                                                                      ApplyArgCursor
                                                                                        (ArrayElementCursor
                                                                                           0
                                                                                           ExpressionCursor)
                                                                                  , typeVariable =
                                                                                      Nothing
                                                                                  , fields =
                                                                                      [ Field
                                                                                          { location =
                                                                                              ApplyArgCursor
                                                                                                (ArrayElementCursor
                                                                                                   0
                                                                                                   (RecordFieldCursor
                                                                                                      (FieldName
                                                                                                         { unFieldName =
                                                                                                             "x"
                                                                                                         })
                                                                                                      TypeCursor))
                                                                                          , name =
                                                                                              FieldName
                                                                                                { unFieldName =
                                                                                                    "x"
                                                                                                }
                                                                                          , typ =
                                                                                              PolyType
                                                                                                (TypeVariable
                                                                                                   { location =
                                                                                                       ()
                                                                                                   , prefix =
                                                                                                       ()
                                                                                                   , index =
                                                                                                       0
                                                                                                   , kind =
                                                                                                       TypeKind
                                                                                                   })
                                                                                          }
                                                                                      , Field
                                                                                          { location =
                                                                                              ApplyArgCursor
                                                                                                (ArrayElementCursor
                                                                                                   0
                                                                                                   (RecordFieldCursor
                                                                                                      (FieldName
                                                                                                         { unFieldName =
                                                                                                             "y"
                                                                                                         })
                                                                                                      TypeCursor))
                                                                                          , name =
                                                                                              FieldName
                                                                                                { unFieldName =
                                                                                                    "y"
                                                                                                }
                                                                                          , typ =
                                                                                              VariableType
                                                                                                (TypeVariable
                                                                                                   { location =
                                                                                                       ApplyArgCursor
                                                                                                         (ArrayElementCursor
                                                                                                            0
                                                                                                            (RecordFieldCursor
                                                                                                               (FieldName
                                                                                                                  { unFieldName =
                                                                                                                      "y"
                                                                                                                  })
                                                                                                               (RowFieldExpression
                                                                                                                  ExpressionCursor)))
                                                                                                   , prefix =
                                                                                                       ApplyPrefix
                                                                                                   , index =
                                                                                                       17
                                                                                                   , kind =
                                                                                                       TypeKind
                                                                                                   })
                                                                                          }
                                                                                      ]
                                                                                  })))
                                                                   , location =
                                                                       ApplyArgCursor
                                                                         ExpressionCursor
                                                                   })
                                                          , typ =
                                                              ArrayType
                                                                (PolyType
                                                                   (TypeVariable
                                                                      { location =
                                                                          ()
                                                                      , prefix =
                                                                          ()
                                                                      , index =
                                                                          0
                                                                      , kind =
                                                                          TypeKind
                                                                      }))
                                                          })
                                                 , typ =
                                                     ArrayType
                                                       (PolyType
                                                          (TypeVariable
                                                             { location = ()
                                                             , prefix = ()
                                                             , index = 0
                                                             , kind = TypeKind
                                                             }))
                                                 })
                                        , argument =
                                            GlobalExpression
                                              (Global
                                                 { location =
                                                     AutoInsertedForDefaulterCursor
                                                 , name =
                                                     InstanceGlobal
                                                       (IntegerOpInstance
                                                          MulitplyOp)
                                                 , scheme =
                                                     ResolvedScheme
                                                       (ApplyType
                                                          (TypeApplication
                                                             { function =
                                                                 ApplyType
                                                                   (TypeApplication
                                                                      { function =
                                                                          ConstantType
                                                                            (TypeConstant
                                                                               { location =
                                                                                   BuiltIn
                                                                               , name =
                                                                                   FunctionTypeName
                                                                               })
                                                                      , argument =
                                                                          ConstantType
                                                                            (TypeConstant
                                                                               { location =
                                                                                   BuiltIn
                                                                               , name =
                                                                                   IntegerTypeName
                                                                               })
                                                                      , location =
                                                                          BuiltIn
                                                                      , kind =
                                                                          FunKind
                                                                            TypeKind
                                                                            TypeKind
                                                                      })
                                                             , argument =
                                                                 ApplyType
                                                                   (TypeApplication
                                                                      { function =
                                                                          ApplyType
                                                                            (TypeApplication
                                                                               { function =
                                                                                   ConstantType
                                                                                     (TypeConstant
                                                                                        { location =
                                                                                            BuiltIn
                                                                                        , name =
                                                                                            FunctionTypeName
                                                                                        })
                                                                               , argument =
                                                                                   ConstantType
                                                                                     (TypeConstant
                                                                                        { location =
                                                                                            BuiltIn
                                                                                        , name =
                                                                                            IntegerTypeName
                                                                                        })
                                                                               , location =
                                                                                   BuiltIn
                                                                               , kind =
                                                                                   FunKind
                                                                                     TypeKind
                                                                                     TypeKind
                                                                               })
                                                                      , argument =
                                                                          ConstantType
                                                                            (TypeConstant
                                                                               { location =
                                                                                   BuiltIn
                                                                               , name =
                                                                                   IntegerTypeName
                                                                               })
                                                                      , location =
                                                                          BuiltIn
                                                                      , kind =
                                                                          TypeKind
                                                                      })
                                                             , location =
                                                                 BuiltIn
                                                             , kind = TypeKind
                                                             }))
                                                 })
                                        , typ =
                                            ArrayType
                                              (PolyType
                                                 (TypeVariable
                                                    { location = ()
                                                    , prefix = ()
                                                    , index = 0
                                                    , kind = TypeKind
                                                    }))
                                        })
                               , typ =
                                   ArrayType
                                     (PolyType
                                        (TypeVariable
                                           { location = ()
                                           , prefix = ()
                                           , index = 0
                                           , kind = TypeKind
                                           }))
                               })
                      , argument =
                          GlobalExpression
                            (Global
                               { location = AutoInsertedForDefaulterCursor
                               , name =
                                   InstanceGlobal FromIntegerIntegerInstance
                               , scheme =
                                   ResolvedScheme
                                     (ApplyType
                                        (TypeApplication
                                           { function =
                                               ApplyType
                                                 (TypeApplication
                                                    { function =
                                                        ConstantType
                                                          (TypeConstant
                                                             { location =
                                                                 BuiltIn
                                                             , name =
                                                                 FunctionTypeName
                                                             })
                                                    , argument =
                                                        ConstantType
                                                          (TypeConstant
                                                             { location =
                                                                 BuiltIn
                                                             , name =
                                                                 IntegerTypeName
                                                             })
                                                    , location = BuiltIn
                                                    , kind =
                                                        FunKind
                                                          TypeKind
                                                          TypeKind
                                                    })
                                           , argument =
                                               ConstantType
                                                 (TypeConstant
                                                    { location = BuiltIn
                                                    , name = IntegerTypeName
                                                    })
                                           , location = BuiltIn
                                           , kind = TypeKind
                                           }))
                               })
                      , typ =
                          ArrayType
                            (PolyType
                               (TypeVariable
                                  { location = ()
                                  , prefix = ()
                                  , index = 0
                                  , kind = TypeKind
                                  }))
                      })
             , scheme =
                 Scheme
                   { location = ExpressionCursor
                   , constraints = []
                   , typ =
                       ArrayType
                         (ConstantType
                            (TypeConstant
                               { location = DefaultedCursor
                               , name = IntegerTypeName
                               }))
                   }
             , defaultedClassConstraints =
                 fromList
                   [ Default
                       { classConstraintDefaulted =
                           ClassConstraint
                             { className = FromIntegerClassName
                             , typ =
                                 ConstantType
                                   (TypeConstant
                                      { location = DefaultedCursor
                                      , name = IntegerTypeName
                                      }) :|
                                 []
                             , location = AutogeneratedCursor
                             }
                       , classConstraintOriginal =
                           ClassConstraint
                             { className = FromIntegerClassName
                             , typ =
                                 VariableType
                                   (TypeVariable
                                      { location = ()
                                      , prefix = ()
                                      , index = 0
                                      , kind = TypeKind
                                      }) :|
                                 []
                             , location = AutogeneratedCursor
                             }
                       , instanceName = FromIntegerIntegerInstance
                       }
                   , Default
                       { classConstraintDefaulted =
                           ClassConstraint
                             { className = MulitplyOpClassName
                             , typ =
                                 ConstantType
                                   (TypeConstant
                                      { location = DefaultedCursor
                                      , name = IntegerTypeName
                                      }) :|
                                 []
                             , location =
                                 ApplyFuncCursor
                                   (ApplyArgCursor
                                      (LambdaBodyCursor
                                         (InfixOpCursor ExpressionCursor)))
                             }
                       , classConstraintOriginal =
                           ClassConstraint
                             { className = MulitplyOpClassName
                             , typ =
                                 VariableType
                                   (TypeVariable
                                      { location = ()
                                      , prefix = ()
                                      , index = 0
                                      , kind = TypeKind
                                      }) :|
                                 []
                             , location =
                                 ApplyFuncCursor
                                   (ApplyArgCursor
                                      (LambdaBodyCursor
                                         (InfixOpCursor ExpressionCursor)))
                             }
                       , instanceName = IntegerOpInstance MulitplyOp
                       }
                   ]
             , ambiguousClassConstraints = fromList []
             }))-})

spec_1_0 :: SpecWith ()
spec_1_0 =
  it
    "1.0"
    (shouldBe
       (defaultText' mempty "" "1.0")
       (Right (Cell {location = AutogeneratedCursor, defaulted = ApplyExpression (Apply {location = AutoInsertedForDefaulterCursor, function = LambdaExpression (Lambda {location = ImplicitArgumentFor AutogeneratedCursor, param = Param {location = ImplicitArgumentFor AutogeneratedCursor, name = (), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}, body = ApplyExpression (Apply {location = AutogeneratedCursor, function = ApplyExpression (Apply {location = ImplicitlyApplicationOn AutogeneratedCursor, function = GlobalExpression (Global {location = AutogeneratedCursor, name = FromDecimalGlobal, scheme = ResolvedScheme (ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = FunctionTypeName}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = ExpressionCursor, name = NatTypeName 1}), location = AutogeneratedCursor, kind = TypeKind}), location = AutogeneratedCursor, kind = FunKind TypeKind TypeKind}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = AutogeneratedCursor, kind = TypeKind}))}), argument = VariableExpression (Variable {location = ImplicitArgumentFor AutogeneratedCursor, name = DeBrujinIndex (DeBrujinNesting 0), typ = ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = FunctionTypeName}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = ExpressionCursor, name = NatTypeName 1}), location = AutogeneratedCursor, kind = TypeKind}), location = AutogeneratedCursor, kind = FunKind TypeKind TypeKind}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = AutogeneratedCursor, kind = TypeKind})}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), argument = LiteralExpression (NumberLiteral (Number {location = ExpressionCursor, number = DecimalNumber (Decimal {places = 1, integer = 10}), typ = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = ExpressionCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = ExpressionCursor, name = NatTypeName 1}), location = ExpressionCursor, kind = TypeKind})})), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), argument = GlobalExpression (Global {location = AutoInsertedForDefaulterCursor, name = InstanceGlobal (FromDecimalDecimalInstance (FromDecimalInstance {supersetPlaces = 1, subsetPlaces = 1})), scheme = ResolvedScheme (ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = FunctionTypeName}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = BuiltIn, name = NatTypeName 1}), location = BuiltIn, kind = TypeKind}), location = BuiltIn, kind = FunKind TypeKind TypeKind}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = BuiltIn, name = NatTypeName 1}), location = BuiltIn, kind = TypeKind}), location = BuiltIn, kind = TypeKind}))}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), scheme = Scheme {location = AutogeneratedCursor, constraints = [], typ = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = DefaultedCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = ExpressionCursor, name = NatTypeName 1}), location = DefaultedCursor, kind = TypeKind})}, defaultedClassConstraints = Seq.fromList [Default {classConstraintDefaulted = ClassConstraint {className = FromDecimalClassName, typ = ConstantType (TypeConstant {location = ExpressionCursor, name = NatTypeName 1}) :| [ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = DefaultedCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = ExpressionCursor, name = NatTypeName 1}), location = DefaultedCursor, kind = TypeKind})], location = AutogeneratedCursor}, classConstraintOriginal = ClassConstraint {className = FromDecimalClassName, typ = ConstantType (TypeConstant {location = ExpressionCursor, name = NatTypeName 1}) :| [VariableType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})], location = AutogeneratedCursor}, instanceName = FromDecimalDecimalInstance (FromDecimalInstance {supersetPlaces = 1, subsetPlaces = 1})}], ambiguousClassConstraints = mempty})))

spec_1_plus_1_0 :: SpecWith ()
spec_1_plus_1_0 =
  it
    "1 + 1.0"
    (shouldBe
       (defaultText' mempty "" "1 + 1.0")
       (Right (Cell {location = ExpressionCursor, defaulted = ApplyExpression (Apply {location = AutoInsertedForDefaulterCursor, function = LambdaExpression (Lambda {location = ImplicitArgumentFor AutogeneratedCursor, param = Param {location = ImplicitArgumentFor AutogeneratedCursor, name = (), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}, body = ApplyExpression (Apply {location = AutoInsertedForDefaulterCursor, function = LambdaExpression (Lambda {location = ImplicitArgumentFor AutogeneratedCursor, param = Param {location = ImplicitArgumentFor AutogeneratedCursor, name = (), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}, body = ApplyExpression (Apply {location = AutoInsertedForDefaulterCursor, function = LambdaExpression (Lambda {location = ImplicitArgumentFor (InfixOpCursor ExpressionCursor), param = Param {location = ImplicitArgumentFor (InfixOpCursor ExpressionCursor), name = (), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}, body = InfixExpression (Infix {location = ExpressionCursor, global = ApplyExpression (Apply {location = ImplicitlyApplicationOn (InfixOpCursor ExpressionCursor), function = GlobalExpression (Global {location = InfixOpCursor ExpressionCursor, name = NumericBinOpGlobal AddOp, scheme = ResolvedScheme (ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = InfixOpCursor ExpressionCursor, name = FunctionTypeName}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = InfixOpCursor ExpressionCursor, kind = TypeKind}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = InfixOpCursor ExpressionCursor, kind = TypeKind}))}), argument = VariableExpression (Variable {location = ImplicitArgumentFor (InfixOpCursor ExpressionCursor), name = DeBrujinIndex (DeBrujinNesting 0), typ = ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = InfixOpCursor ExpressionCursor, name = FunctionTypeName}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = InfixOpCursor ExpressionCursor, kind = TypeKind}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = InfixOpCursor ExpressionCursor, kind = TypeKind})}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), left = ApplyExpression (Apply {location = AutogeneratedCursor, function = ApplyExpression (Apply {location = ImplicitlyApplicationOn AutogeneratedCursor, function = GlobalExpression (Global {location = AutogeneratedCursor, name = FromIntegerGlobal, scheme = ResolvedScheme (ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = FunctionTypeName}), argument = ConstantType (TypeConstant {location = AutogeneratedCursor, name = IntegerTypeName}), location = AutogeneratedCursor, kind = FunKind TypeKind TypeKind}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = AutogeneratedCursor, kind = TypeKind}))}), argument = VariableExpression (Variable {location = ImplicitArgumentFor AutogeneratedCursor, name = DeBrujinIndex (DeBrujinNesting 1), typ = ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = FunctionTypeName}), argument = ConstantType (TypeConstant {location = AutogeneratedCursor, name = IntegerTypeName}), location = AutogeneratedCursor, kind = FunKind TypeKind TypeKind}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = AutogeneratedCursor, kind = TypeKind})}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), argument = LiteralExpression (NumberLiteral (Number {location = InfixLeftCursor ExpressionCursor, number = IntegerNumber 1, typ = ConstantType (TypeConstant {location = InfixLeftCursor ExpressionCursor, name = IntegerTypeName})})), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), right = ApplyExpression (Apply {location = AutogeneratedCursor, function = ApplyExpression (Apply {location = ImplicitlyApplicationOn AutogeneratedCursor, function = GlobalExpression (Global {location = AutogeneratedCursor, name = FromDecimalGlobal, scheme = ResolvedScheme (ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = FunctionTypeName}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = InfixRightCursor ExpressionCursor, name = NatTypeName 1}), location = AutogeneratedCursor, kind = TypeKind}), location = AutogeneratedCursor, kind = FunKind TypeKind TypeKind}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = AutogeneratedCursor, kind = TypeKind}))}), argument = VariableExpression (Variable {location = ImplicitArgumentFor AutogeneratedCursor, name = DeBrujinIndex (DeBrujinNesting 2), typ = ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = FunctionTypeName}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = AutogeneratedCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = InfixRightCursor ExpressionCursor, name = NatTypeName 1}), location = AutogeneratedCursor, kind = TypeKind}), location = AutogeneratedCursor, kind = FunKind TypeKind TypeKind}), argument = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}), location = AutogeneratedCursor, kind = TypeKind})}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), argument = LiteralExpression (NumberLiteral (Number {location = InfixRightCursor ExpressionCursor, number = DecimalNumber (Decimal {places = 1, integer = 10}), typ = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = InfixRightCursor ExpressionCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = InfixRightCursor ExpressionCursor, name = NatTypeName 1}), location = InfixRightCursor ExpressionCursor, kind = TypeKind})})), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), argument = GlobalExpression (Global {location = AutoInsertedForDefaulterCursor, name = InstanceGlobal (DecimalOpInstance 1 AddOp), scheme = ResolvedScheme (ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = FunctionTypeName}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = BuiltIn, name = NatTypeName 1}), location = BuiltIn, kind = TypeKind}), location = BuiltIn, kind = FunKind TypeKind TypeKind}), argument = ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = FunctionTypeName}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = BuiltIn, name = NatTypeName 1}), location = BuiltIn, kind = TypeKind}), location = BuiltIn, kind = FunKind TypeKind TypeKind}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = BuiltIn, name = NatTypeName 1}), location = BuiltIn, kind = TypeKind}), location = BuiltIn, kind = TypeKind}), location = BuiltIn, kind = TypeKind}))}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), argument = GlobalExpression (Global {location = AutoInsertedForDefaulterCursor, name = InstanceGlobal (FromIntegerDecimalInstance 1), scheme = ResolvedScheme (ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = FunctionTypeName}), argument = ConstantType (TypeConstant {location = BuiltIn, name = IntegerTypeName}), location = BuiltIn, kind = FunKind TypeKind TypeKind}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = BuiltIn, name = NatTypeName 1}), location = BuiltIn, kind = TypeKind}), location = BuiltIn, kind = TypeKind}))}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), argument = GlobalExpression (Global {location = AutoInsertedForDefaulterCursor, name = InstanceGlobal (FromDecimalDecimalInstance (FromDecimalInstance {supersetPlaces = 1, subsetPlaces = 1})), scheme = ResolvedScheme (ApplyType (TypeApplication {function = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = FunctionTypeName}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = BuiltIn, name = NatTypeName 1}), location = BuiltIn, kind = TypeKind}), location = BuiltIn, kind = FunKind TypeKind TypeKind}), argument = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = BuiltIn, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = BuiltIn, name = NatTypeName 1}), location = BuiltIn, kind = TypeKind}), location = BuiltIn, kind = TypeKind}))}), typ = PolyType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})}), scheme = Scheme {location = ExpressionCursor, constraints = [], typ = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = DefaultedCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = InfixRightCursor ExpressionCursor, name = NatTypeName 1}), location = DefaultedCursor, kind = TypeKind})}, defaultedClassConstraints = Seq.fromList [Default {classConstraintDefaulted = ClassConstraint {className = FromDecimalClassName, typ = ConstantType (TypeConstant {location = InfixRightCursor ExpressionCursor, name = NatTypeName 1}) :| [ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = DefaultedCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = InfixRightCursor ExpressionCursor, name = NatTypeName 1}), location = DefaultedCursor, kind = TypeKind})], location = AutogeneratedCursor}, classConstraintOriginal = ClassConstraint {className = FromDecimalClassName, typ = ConstantType (TypeConstant {location = InfixRightCursor ExpressionCursor, name = NatTypeName 1}) :| [VariableType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind})], location = AutogeneratedCursor}, instanceName = FromDecimalDecimalInstance (FromDecimalInstance {supersetPlaces = 1, subsetPlaces = 1})},Default {classConstraintDefaulted = ClassConstraint {className = FromIntegerClassName, typ = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = DefaultedCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = InfixRightCursor ExpressionCursor, name = NatTypeName 1}), location = DefaultedCursor, kind = TypeKind}) :| [], location = AutogeneratedCursor}, classConstraintOriginal = ClassConstraint {className = FromIntegerClassName, typ = VariableType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}) :| [], location = AutogeneratedCursor}, instanceName = FromIntegerDecimalInstance 1},Default {classConstraintDefaulted = ClassConstraint {className = AddOpClassName, typ = ApplyType (TypeApplication {function = ConstantType (TypeConstant {location = DefaultedCursor, name = DecimalTypeName}), argument = ConstantType (TypeConstant {location = InfixRightCursor ExpressionCursor, name = NatTypeName 1}), location = DefaultedCursor, kind = TypeKind}) :| [], location = InfixOpCursor ExpressionCursor}, classConstraintOriginal = ClassConstraint {className = AddOpClassName, typ = VariableType (TypeVariable {location = (), prefix = (), index = 0, kind = TypeKind}) :| [], location = InfixOpCursor ExpressionCursor}, instanceName = DecimalOpInstance 1 AddOp}], ambiguousClassConstraints = mempty})))

spec_lambda :: SpecWith ()
spec_lambda =
  it
    "x : x + x"
    (shouldBe
       (defaultText' mempty "" "x : x + x")
       (Right
          (Cell
             { location = ExpressionCursor
             , defaulted =
                 LambdaExpression
                   (Lambda
                      { location =
                          ImplicitArgumentFor
                            (LambdaBodyCursor (InfixOpCursor ExpressionCursor))
                      , param =
                          Param
                            { location =
                                ImplicitArgumentFor
                                  (LambdaBodyCursor
                                     (InfixOpCursor ExpressionCursor))
                            , name = ()
                            , typ =
                                ApplyType
                                  (TypeApplication
                                     { function =
                                         ApplyType
                                           (TypeApplication
                                              { function =
                                                  ConstantType
                                                    (TypeConstant
                                                       { location =
                                                           ExpressionCursor
                                                       , name = FunctionTypeName
                                                       })
                                              , argument =
                                                  PolyType
                                                    (TypeVariable
                                                       { location = ()
                                                       , prefix = ()
                                                       , index = 0
                                                       , kind = TypeKind
                                                       })
                                              , location = ExpressionCursor
                                              , kind = FunKind TypeKind TypeKind
                                              })
                                     , argument =
                                         PolyType
                                           (TypeVariable
                                              { location = ()
                                              , prefix = ()
                                              , index = 0
                                              , kind = TypeKind
                                              })
                                     , location = ExpressionCursor
                                     , kind = TypeKind
                                     })
                            }
                      , body =
                          LambdaExpression
                            (Lambda
                               { location = ExpressionCursor
                               , param =
                                   Param
                                     { location = LambdaParamCursor
                                     , name = ()
                                     , typ =
                                         PolyType
                                           (TypeVariable
                                              { location = ()
                                              , prefix = ()
                                              , index = 0
                                              , kind = TypeKind
                                              })
                                     }
                               , body =
                                   InfixExpression
                                     (Infix
                                        { location =
                                            LambdaBodyCursor ExpressionCursor
                                        , global =
                                            ApplyExpression
                                              (Apply
                                                 { location =
                                                     ImplicitlyApplicationOn
                                                       (LambdaBodyCursor
                                                          (InfixOpCursor
                                                             ExpressionCursor))
                                                 , function =
                                                     GlobalExpression
                                                       (Global
                                                          { location =
                                                              LambdaBodyCursor
                                                                (InfixOpCursor
                                                                   ExpressionCursor)
                                                          , name =
                                                              NumericBinOpGlobal
                                                                AddOp
                                                          , scheme =
                                                              ResolvedScheme
                                                                (ApplyType
                                                                   (TypeApplication
                                                                      { function =
                                                                          ApplyType
                                                                            (TypeApplication
                                                                               { function =
                                                                                   ConstantType
                                                                                     (TypeConstant
                                                                                        { location =
                                                                                            LambdaBodyCursor
                                                                                              (InfixOpCursor
                                                                                                 ExpressionCursor)
                                                                                        , name =
                                                                                            FunctionTypeName
                                                                                        })
                                                                               , argument =
                                                                                   PolyType
                                                                                     (TypeVariable
                                                                                        { location =
                                                                                            ()
                                                                                        , prefix =
                                                                                            ()
                                                                                        , index =
                                                                                            0
                                                                                        , kind =
                                                                                            TypeKind
                                                                                        })
                                                                               , location =
                                                                                   LambdaBodyCursor
                                                                                     (InfixOpCursor
                                                                                        ExpressionCursor)
                                                                               , kind =
                                                                                   TypeKind
                                                                               })
                                                                      , argument =
                                                                          PolyType
                                                                            (TypeVariable
                                                                               { location =
                                                                                   ()
                                                                               , prefix =
                                                                                   ()
                                                                               , index =
                                                                                   0
                                                                               , kind =
                                                                                   TypeKind
                                                                               })
                                                                      , location =
                                                                          LambdaBodyCursor
                                                                            (InfixOpCursor
                                                                               ExpressionCursor)
                                                                      , kind =
                                                                          TypeKind
                                                                      }))
                                                          })
                                                 , argument =
                                                     VariableExpression
                                                       (Variable
                                                          { location =
                                                              ImplicitArgumentFor
                                                                (LambdaBodyCursor
                                                                   (InfixOpCursor
                                                                      ExpressionCursor))
                                                          , name =
                                                              DeBrujinIndex
                                                                (DeBrujinNesting
                                                                   1)
                                                          , typ =
                                                              ApplyType
                                                                (TypeApplication
                                                                   { function =
                                                                       ApplyType
                                                                         (TypeApplication
                                                                            { function =
                                                                                ConstantType
                                                                                  (TypeConstant
                                                                                     { location =
                                                                                         LambdaBodyCursor
                                                                                           (InfixOpCursor
                                                                                              ExpressionCursor)
                                                                                     , name =
                                                                                         FunctionTypeName
                                                                                     })
                                                                            , argument =
                                                                                PolyType
                                                                                  (TypeVariable
                                                                                     { location =
                                                                                         ()
                                                                                     , prefix =
                                                                                         ()
                                                                                     , index =
                                                                                         0
                                                                                     , kind =
                                                                                         TypeKind
                                                                                     })
                                                                            , location =
                                                                                LambdaBodyCursor
                                                                                  (InfixOpCursor
                                                                                     ExpressionCursor)
                                                                            , kind =
                                                                                TypeKind
                                                                            })
                                                                   , argument =
                                                                       PolyType
                                                                         (TypeVariable
                                                                            { location =
                                                                                ()
                                                                            , prefix =
                                                                                ()
                                                                            , index =
                                                                                0
                                                                            , kind =
                                                                                TypeKind
                                                                            })
                                                                   , location =
                                                                       LambdaBodyCursor
                                                                         (InfixOpCursor
                                                                            ExpressionCursor)
                                                                   , kind =
                                                                       TypeKind
                                                                   })
                                                          })
                                                 , typ =
                                                     PolyType
                                                       (TypeVariable
                                                          { location = ()
                                                          , prefix = ()
                                                          , index = 0
                                                          , kind = TypeKind
                                                          })
                                                 })
                                        , left =
                                            VariableExpression
                                              (Variable
                                                 { location =
                                                     LambdaBodyCursor
                                                       (InfixLeftCursor
                                                          ExpressionCursor)
                                                 , name =
                                                     DeBrujinIndex
                                                       (DeBrujinNesting 0)
                                                 , typ =
                                                     PolyType
                                                       (TypeVariable
                                                          { location = ()
                                                          , prefix = ()
                                                          , index = 0
                                                          , kind = TypeKind
                                                          })
                                                 })
                                        , right =
                                            VariableExpression
                                              (Variable
                                                 { location =
                                                     LambdaBodyCursor
                                                       (InfixRightCursor
                                                          ExpressionCursor)
                                                 , name =
                                                     DeBrujinIndex
                                                       (DeBrujinNesting 0)
                                                 , typ =
                                                     PolyType
                                                       (TypeVariable
                                                          { location = ()
                                                          , prefix = ()
                                                          , index = 0
                                                          , kind = TypeKind
                                                          })
                                                 })
                                        , typ =
                                            PolyType
                                              (TypeVariable
                                                 { location = ()
                                                 , prefix = ()
                                                 , index = 0
                                                 , kind = TypeKind
                                                 })
                                        })
                               , typ =
                                   ApplyType
                                     (TypeApplication
                                        { function =
                                            ApplyType
                                              (TypeApplication
                                                 { function =
                                                     ConstantType
                                                       (TypeConstant
                                                          { location =
                                                              ExpressionCursor
                                                          , name =
                                                              FunctionTypeName
                                                          })
                                                 , argument =
                                                     PolyType
                                                       (TypeVariable
                                                          { location = ()
                                                          , prefix = ()
                                                          , index = 0
                                                          , kind = TypeKind
                                                          })
                                                 , location = ExpressionCursor
                                                 , kind =
                                                     FunKind TypeKind TypeKind
                                                 })
                                        , argument =
                                            PolyType
                                              (TypeVariable
                                                 { location = ()
                                                 , prefix = ()
                                                 , index = 0
                                                 , kind = TypeKind
                                                 })
                                        , location = ExpressionCursor
                                        , kind = TypeKind
                                        })
                               })
                      , typ =
                          ApplyType
                            (TypeApplication
                               { function =
                                   ApplyType
                                     (TypeApplication
                                        { function =
                                            ConstantType
                                              (TypeConstant
                                                 { location = ExpressionCursor
                                                 , name = FunctionTypeName
                                                 })
                                        , argument =
                                            PolyType
                                              (TypeVariable
                                                 { location = ()
                                                 , prefix = ()
                                                 , index = 0
                                                 , kind = TypeKind
                                                 })
                                        , location = ExpressionCursor
                                        , kind = FunKind TypeKind TypeKind
                                        })
                               , argument =
                                   PolyType
                                     (TypeVariable
                                        { location = ()
                                        , prefix = ()
                                        , index = 0
                                        , kind = TypeKind
                                        })
                               , location = ExpressionCursor
                               , kind = TypeKind
                               })
                      })
             , scheme =
                 Scheme
                   { location = ExpressionCursor
                   , constraints =
                       [ ClassConstraint
                           { className = AddOpClassName
                           , typ =
                               VariableType
                                 (TypeVariable
                                    { location = ()
                                    , prefix = ()
                                    , index = 0
                                    , kind = TypeKind
                                    }) :|
                               []
                           , location =
                               LambdaBodyCursor (InfixOpCursor ExpressionCursor)
                           }
                       ]
                   , typ =
                       ApplyType
                         (TypeApplication
                            { function =
                                ApplyType
                                  (TypeApplication
                                     { function =
                                         ConstantType
                                           (TypeConstant
                                              { location = ExpressionCursor
                                              , name = FunctionTypeName
                                              })
                                     , argument =
                                         VariableType
                                           (TypeVariable
                                              { location = ()
                                              , prefix = ()
                                              , index = 0
                                              , kind = TypeKind
                                              })
                                     , location = ExpressionCursor
                                     , kind = FunKind TypeKind TypeKind
                                     })
                            , argument =
                                VariableType
                                  (TypeVariable
                                     { location = ()
                                     , prefix = ()
                                     , index = 0
                                     , kind = TypeKind
                                     })
                            , location = ExpressionCursor
                            , kind = TypeKind
                            })
                   }
             , defaultedClassConstraints = Seq.fromList []
             , ambiguousClassConstraints = Seq.fromList []
             })))
