{-# LANGUAGE GADTs #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Check defaulting works as expected, and fails as expected.

module DefaultSpec where

import           Data.List.NonEmpty (NonEmpty(..))
import           Data.Map.Strict (Map)
import qualified Data.Sequence as Seq
import           Data.Text (Text)
import           Inflex.Defaulter
import           Inflex.Types
import           Test.Hspec

defaultText' :: (e~ ()) =>
     Map Hash (Either e (Scheme Polymorphic))
  -> FilePath
  -> Text
  -> Either (ResolverDefaulterError e) Cell
defaultText' = defaultText

spec :: Spec
spec = do
  spec_1
  spec_1_0
  spec_1_plus_1_0
  spec_lambda

spec_1 :: SpecWith ()
spec_1 =
  it
    "1"
    (shouldBe
       (defaultText' mempty "" "0")
       (Right
          (Cell
             { location = AutogeneratedCursor
             , expression =
                 ApplyExpression
                   (Apply
                      { location = AutoInsertedForDefaulterCursor
                      , function =
                          LambdaExpression
                            (Lambda
                               { location =
                                   ImplicitArgumentFor AutogeneratedCursor
                               , param =
                                   Param
                                     { location =
                                         ImplicitArgumentFor AutogeneratedCursor
                                     , name = ()
                                     , typ =
                                         PolyType
                                           (TypeVariable
                                              { location = ()
                                              , prefix = ()
                                              , index = 0
                                              , kind = TypeKind
                                              })
                                     }
                               , body =
                                   ApplyExpression
                                     (Apply
                                        { location = AutogeneratedCursor
                                        , function =
                                            ApplyExpression
                                              (Apply
                                                 { location =
                                                     ImplicitlyApplicationOn
                                                       AutogeneratedCursor
                                                 , function =
                                                     GlobalExpression
                                                       (Global
                                                          { location =
                                                              AutogeneratedCursor
                                                          , name =
                                                              FromIntegerGlobal
                                                          , scheme =
                                                              ResolvedScheme
                                                                (ApplyType
                                                                   (TypeApplication
                                                                      { function =
                                                                          ApplyType
                                                                            (TypeApplication
                                                                               { function =
                                                                                   ConstantType
                                                                                     (TypeConstant
                                                                                        { location =
                                                                                            AutogeneratedCursor
                                                                                        , name =
                                                                                            FunctionTypeName
                                                                                        })
                                                                               , argument =
                                                                                   ConstantType
                                                                                     (TypeConstant
                                                                                        { location =
                                                                                            AutogeneratedCursor
                                                                                        , name =
                                                                                            IntegerTypeName
                                                                                        })
                                                                               , location =
                                                                                   AutogeneratedCursor
                                                                               , kind =
                                                                                   FunKind
                                                                                     TypeKind
                                                                                     TypeKind
                                                                               })
                                                                      , argument =
                                                                          PolyType
                                                                            (TypeVariable
                                                                               { location =
                                                                                   ()
                                                                               , prefix =
                                                                                   ()
                                                                               , index =
                                                                                   0
                                                                               , kind =
                                                                                   TypeKind
                                                                               })
                                                                      , location =
                                                                          AutogeneratedCursor
                                                                      , kind =
                                                                          TypeKind
                                                                      }))
                                                          })
                                                 , argument =
                                                     VariableExpression
                                                       (Variable
                                                          { location =
                                                              ImplicitArgumentFor
                                                                AutogeneratedCursor
                                                          , name =
                                                              DeBrujinIndex
                                                                (DeBrujinNesting
                                                                   0)
                                                          , typ =
                                                              ApplyType
                                                                (TypeApplication
                                                                   { function =
                                                                       ApplyType
                                                                         (TypeApplication
                                                                            { function =
                                                                                ConstantType
                                                                                  (TypeConstant
                                                                                     { location =
                                                                                         AutogeneratedCursor
                                                                                     , name =
                                                                                         FunctionTypeName
                                                                                     })
                                                                            , argument =
                                                                                ConstantType
                                                                                  (TypeConstant
                                                                                     { location =
                                                                                         AutogeneratedCursor
                                                                                     , name =
                                                                                         IntegerTypeName
                                                                                     })
                                                                            , location =
                                                                                AutogeneratedCursor
                                                                            , kind =
                                                                                FunKind
                                                                                  TypeKind
                                                                                  TypeKind
                                                                            })
                                                                   , argument =
                                                                       PolyType
                                                                         (TypeVariable
                                                                            { location =
                                                                                ()
                                                                            , prefix =
                                                                                ()
                                                                            , index =
                                                                                0
                                                                            , kind =
                                                                                TypeKind
                                                                            })
                                                                   , location =
                                                                       AutogeneratedCursor
                                                                   , kind =
                                                                       TypeKind
                                                                   })
                                                          })
                                                 , typ =
                                                     PolyType
                                                       (TypeVariable
                                                          { location = ()
                                                          , prefix = ()
                                                          , index = 0
                                                          , kind = TypeKind
                                                          })
                                                 })
                                        , argument =
                                            LiteralExpression
                                              (NumberLiteral
                                                 (Number
                                                    { location =
                                                        ExpressionCursor
                                                    , number = IntegerNumber 0
                                                    , typ =
                                                        ConstantType
                                                          (TypeConstant
                                                             { location =
                                                                 ExpressionCursor
                                                             , name =
                                                                 IntegerTypeName
                                                             })
                                                    }))
                                        , typ =
                                            PolyType
                                              (TypeVariable
                                                 { location = ()
                                                 , prefix = ()
                                                 , index = 0
                                                 , kind = TypeKind
                                                 })
                                        })
                               , typ =
                                   PolyType
                                     (TypeVariable
                                        { location = ()
                                        , prefix = ()
                                        , index = 0
                                        , kind = TypeKind
                                        })
                               })
                      , argument =
                          GlobalExpression
                            (Global
                               { location = AutoInsertedForDefaulterCursor
                               , name =
                                   InstanceGlobal FromIntegerIntegerInstance
                               , scheme =
                                   ResolvedScheme
                                     (ApplyType
                                        (TypeApplication
                                           { function =
                                               ConstantType
                                                 (TypeConstant
                                                    { location = BuiltIn
                                                    , name = IntegerTypeName
                                                    })
                                           , argument =
                                               ConstantType
                                                 (TypeConstant
                                                    { location = BuiltIn
                                                    , name = IntegerTypeName
                                                    })
                                           , location = BuiltIn
                                           , kind = TypeKind
                                           }))
                               })
                      , typ =
                          PolyType
                            (TypeVariable
                               { location = ()
                               , prefix = ()
                               , index = 0
                               , kind = TypeKind
                               })
                      })
             , scheme =
                 Scheme
                   { location = AutogeneratedCursor
                   , constraints = []
                   , typ =
                       ConstantType
                         (TypeConstant
                            {location = DefaultedCursor, name = IntegerTypeName})
                   }
             , defaultedClassConstraints =
                 Seq.fromList
                   [ Default
                       { classConstraintDefaulted =
                           ClassConstraint
                             { className = FromIntegerClassName
                             , typ =
                                 ConstantType
                                   (TypeConstant
                                      { location = DefaultedCursor
                                      , name = IntegerTypeName
                                      }) :|
                                 []
                             , location = AutogeneratedCursor
                             }
                       , classConstraintOriginal =
                           ClassConstraint
                             { className = FromIntegerClassName
                             , typ =
                                 VariableType
                                   (TypeVariable
                                      { location = ()
                                      , prefix = ()
                                      , index = 0
                                      , kind = TypeKind
                                      }) :|
                                 []
                             , location = AutogeneratedCursor
                             }
                       , instanceName = FromIntegerIntegerInstance
                       }
                   ]
             , ambiguousClassConstraints = Seq.fromList []
             })))

spec_1_0 :: SpecWith ()
spec_1_0 =
  it
    "1.0"
    (shouldBe
       (defaultText' mempty "" "1.0")
       (Right
          (Cell
             { location = AutogeneratedCursor
             , expression =
                 ApplyExpression
                   (Apply
                      { location = AutoInsertedForDefaulterCursor
                      , function =
                          LambdaExpression
                            (Lambda
                               { location =
                                   ImplicitArgumentFor AutogeneratedCursor
                               , param =
                                   Param
                                     { location =
                                         ImplicitArgumentFor AutogeneratedCursor
                                     , name = ()
                                     , typ =
                                         PolyType
                                           (TypeVariable
                                              { location = ()
                                              , prefix = ()
                                              , index = 0
                                              , kind = TypeKind
                                              })
                                     }
                               , body =
                                   ApplyExpression
                                     (Apply
                                        { location = AutogeneratedCursor
                                        , function =
                                            ApplyExpression
                                              (Apply
                                                 { location =
                                                     ImplicitlyApplicationOn
                                                       AutogeneratedCursor
                                                 , function =
                                                     GlobalExpression
                                                       (Global
                                                          { location =
                                                              AutogeneratedCursor
                                                          , name =
                                                              FromDecimalGlobal
                                                          , scheme =
                                                              ResolvedScheme
                                                                (ApplyType
                                                                   (TypeApplication
                                                                      { function =
                                                                          ApplyType
                                                                            (TypeApplication
                                                                               { function =
                                                                                   ConstantType
                                                                                     (TypeConstant
                                                                                        { location =
                                                                                            AutogeneratedCursor
                                                                                        , name =
                                                                                            FunctionTypeName
                                                                                        })
                                                                               , argument =
                                                                                   ApplyType
                                                                                     (TypeApplication
                                                                                        { function =
                                                                                            ConstantType
                                                                                              (TypeConstant
                                                                                                 { location =
                                                                                                     AutogeneratedCursor
                                                                                                 , name =
                                                                                                     DecimalTypeName
                                                                                                 })
                                                                                        , argument =
                                                                                            ConstantType
                                                                                              (TypeConstant
                                                                                                 { location =
                                                                                                     ExpressionCursor
                                                                                                 , name =
                                                                                                     NatTypeName
                                                                                                       1
                                                                                                 })
                                                                                        , location =
                                                                                            AutogeneratedCursor
                                                                                        , kind =
                                                                                            TypeKind
                                                                                        })
                                                                               , location =
                                                                                   AutogeneratedCursor
                                                                               , kind =
                                                                                   FunKind
                                                                                     TypeKind
                                                                                     TypeKind
                                                                               })
                                                                      , argument =
                                                                          PolyType
                                                                            (TypeVariable
                                                                               { location =
                                                                                   ()
                                                                               , prefix =
                                                                                   ()
                                                                               , index =
                                                                                   0
                                                                               , kind =
                                                                                   TypeKind
                                                                               })
                                                                      , location =
                                                                          AutogeneratedCursor
                                                                      , kind =
                                                                          TypeKind
                                                                      }))
                                                          })
                                                 , argument =
                                                     VariableExpression
                                                       (Variable
                                                          { location =
                                                              ImplicitArgumentFor
                                                                AutogeneratedCursor
                                                          , name =
                                                              DeBrujinIndex
                                                                (DeBrujinNesting
                                                                   0)
                                                          , typ =
                                                              ApplyType
                                                                (TypeApplication
                                                                   { function =
                                                                       ApplyType
                                                                         (TypeApplication
                                                                            { function =
                                                                                ConstantType
                                                                                  (TypeConstant
                                                                                     { location =
                                                                                         AutogeneratedCursor
                                                                                     , name =
                                                                                         FunctionTypeName
                                                                                     })
                                                                            , argument =
                                                                                ApplyType
                                                                                  (TypeApplication
                                                                                     { function =
                                                                                         ConstantType
                                                                                           (TypeConstant
                                                                                              { location =
                                                                                                  AutogeneratedCursor
                                                                                              , name =
                                                                                                  DecimalTypeName
                                                                                              })
                                                                                     , argument =
                                                                                         ConstantType
                                                                                           (TypeConstant
                                                                                              { location =
                                                                                                  ExpressionCursor
                                                                                              , name =
                                                                                                  NatTypeName
                                                                                                    1
                                                                                              })
                                                                                     , location =
                                                                                         AutogeneratedCursor
                                                                                     , kind =
                                                                                         TypeKind
                                                                                     })
                                                                            , location =
                                                                                AutogeneratedCursor
                                                                            , kind =
                                                                                FunKind
                                                                                  TypeKind
                                                                                  TypeKind
                                                                            })
                                                                   , argument =
                                                                       PolyType
                                                                         (TypeVariable
                                                                            { location =
                                                                                ()
                                                                            , prefix =
                                                                                ()
                                                                            , index =
                                                                                0
                                                                            , kind =
                                                                                TypeKind
                                                                            })
                                                                   , location =
                                                                       AutogeneratedCursor
                                                                   , kind =
                                                                       TypeKind
                                                                   })
                                                          })
                                                 , typ =
                                                     PolyType
                                                       (TypeVariable
                                                          { location = ()
                                                          , prefix = ()
                                                          , index = 0
                                                          , kind = TypeKind
                                                          })
                                                 })
                                        , argument =
                                            LiteralExpression
                                              (NumberLiteral
                                                 (Number
                                                    { location =
                                                        ExpressionCursor
                                                    , number =
                                                        DecimalNumber
                                                          (Decimal
                                                             { places = 1
                                                             , integer = 10
                                                             })
                                                    , typ =
                                                        ApplyType
                                                          (TypeApplication
                                                             { function =
                                                                 ConstantType
                                                                   (TypeConstant
                                                                      { location =
                                                                          ExpressionCursor
                                                                      , name =
                                                                          DecimalTypeName
                                                                      })
                                                             , argument =
                                                                 ConstantType
                                                                   (TypeConstant
                                                                      { location =
                                                                          ExpressionCursor
                                                                      , name =
                                                                          NatTypeName
                                                                            1
                                                                      })
                                                             , location =
                                                                 ExpressionCursor
                                                             , kind = TypeKind
                                                             })
                                                    }))
                                        , typ =
                                            PolyType
                                              (TypeVariable
                                                 { location = ()
                                                 , prefix = ()
                                                 , index = 0
                                                 , kind = TypeKind
                                                 })
                                        })
                               , typ =
                                   PolyType
                                     (TypeVariable
                                        { location = ()
                                        , prefix = ()
                                        , index = 0
                                        , kind = TypeKind
                                        })
                               })
                      , argument =
                          GlobalExpression
                            (Global
                               { location = AutoInsertedForDefaulterCursor
                               , name =
                                   InstanceGlobal
                                     (FromDecimalDecimalInstance
                                        (FromDecimalInstance
                                           { supersetPlaces = 1
                                           , subsetPlaces = 1
                                           }))
                               , scheme =
                                   ResolvedScheme
                                     (ApplyType
                                        (TypeApplication
                                           { function =
                                               ApplyType
                                                 (TypeApplication
                                                    { function =
                                                        ConstantType
                                                          (TypeConstant
                                                             { location =
                                                                 BuiltIn
                                                             , name =
                                                                 DecimalTypeName
                                                             })
                                                    , argument =
                                                        ConstantType
                                                          (TypeConstant
                                                             { location =
                                                                 BuiltIn
                                                             , name =
                                                                 NatTypeName 1
                                                             })
                                                    , location = BuiltIn
                                                    , kind = TypeKind
                                                    })
                                           , argument =
                                               ApplyType
                                                 (TypeApplication
                                                    { function =
                                                        ConstantType
                                                          (TypeConstant
                                                             { location =
                                                                 BuiltIn
                                                             , name =
                                                                 DecimalTypeName
                                                             })
                                                    , argument =
                                                        ConstantType
                                                          (TypeConstant
                                                             { location =
                                                                 BuiltIn
                                                             , name =
                                                                 NatTypeName 1
                                                             })
                                                    , location = BuiltIn
                                                    , kind = TypeKind
                                                    })
                                           , location = BuiltIn
                                           , kind = TypeKind
                                           }))
                               })
                      , typ =
                          PolyType
                            (TypeVariable
                               { location = ()
                               , prefix = ()
                               , index = 0
                               , kind = TypeKind
                               })
                      })
             , scheme =
                 Scheme
                   { location = AutogeneratedCursor
                   , constraints = []
                   , typ =
                       ApplyType
                         (TypeApplication
                            { function =
                                ConstantType
                                  (TypeConstant
                                     { location = DefaultedCursor
                                     , name = DecimalTypeName
                                     })
                            , argument =
                                ConstantType
                                  (TypeConstant
                                     { location = ExpressionCursor
                                     , name = NatTypeName 1
                                     })
                            , location = DefaultedCursor
                            , kind = TypeKind
                            })
                   }
             , defaultedClassConstraints =
                 Seq.fromList
                   [ Default
                       { classConstraintDefaulted =
                           ClassConstraint
                             { className = FromDecimalClassName
                             , typ =
                                 ConstantType
                                   (TypeConstant
                                      { location = ExpressionCursor
                                      , name = NatTypeName 1
                                      }) :|
                                 [ ApplyType
                                     (TypeApplication
                                        { function =
                                            ConstantType
                                              (TypeConstant
                                                 { location = DefaultedCursor
                                                 , name = DecimalTypeName
                                                 })
                                        , argument =
                                            ConstantType
                                              (TypeConstant
                                                 { location = ExpressionCursor
                                                 , name = NatTypeName 1
                                                 })
                                        , location = DefaultedCursor
                                        , kind = TypeKind
                                        })
                                 ]
                             , location = AutogeneratedCursor
                             }
                       , classConstraintOriginal =
                           ClassConstraint
                             { className = FromDecimalClassName
                             , typ =
                                 ConstantType
                                   (TypeConstant
                                      { location = ExpressionCursor
                                      , name = NatTypeName 1
                                      }) :|
                                 [ VariableType
                                     (TypeVariable
                                        { location = ()
                                        , prefix = ()
                                        , index = 0
                                        , kind = TypeKind
                                        })
                                 ]
                             , location = AutogeneratedCursor
                             }
                       , instanceName =
                           FromDecimalDecimalInstance
                             (FromDecimalInstance
                                {supersetPlaces = 1, subsetPlaces = 1})
                       }
                   ]
             , ambiguousClassConstraints = Seq.fromList []
             })))

spec_1_plus_1_0 :: SpecWith ()
spec_1_plus_1_0 =
  it
    "1 + 1.0"
    (shouldBe
       (defaultText' mempty "" "1 + 1.0")
       (Right
          (Cell
             { location = ExpressionCursor
             , expression =
                 ApplyExpression
                   (Apply
                      { location = AutoInsertedForDefaulterCursor
                      , function =
                          LambdaExpression
                            (Lambda
                               { location =
                                   ImplicitArgumentFor AutogeneratedCursor
                               , param =
                                   Param
                                     { location =
                                         ImplicitArgumentFor AutogeneratedCursor
                                     , name = ()
                                     , typ =
                                         PolyType
                                           (TypeVariable
                                              { location = ()
                                              , prefix = ()
                                              , index = 0
                                              , kind = TypeKind
                                              })
                                     }
                               , body =
                                   ApplyExpression
                                     (Apply
                                        { location =
                                            AutoInsertedForDefaulterCursor
                                        , function =
                                            LambdaExpression
                                              (Lambda
                                                 { location =
                                                     ImplicitArgumentFor
                                                       AutogeneratedCursor
                                                 , param =
                                                     Param
                                                       { location =
                                                           ImplicitArgumentFor
                                                             AutogeneratedCursor
                                                       , name = ()
                                                       , typ =
                                                           PolyType
                                                             (TypeVariable
                                                                { location = ()
                                                                , prefix = ()
                                                                , index = 0
                                                                , kind =
                                                                    TypeKind
                                                                })
                                                       }
                                                 , body =
                                                     ApplyExpression
                                                       (Apply
                                                          { location =
                                                              AutoInsertedForDefaulterCursor
                                                          , function =
                                                              LambdaExpression
                                                                (Lambda
                                                                   { location =
                                                                       ImplicitArgumentFor
                                                                         (InfixOpCursor
                                                                            ExpressionCursor)
                                                                   , param =
                                                                       Param
                                                                         { location =
                                                                             ImplicitArgumentFor
                                                                               (InfixOpCursor
                                                                                  ExpressionCursor)
                                                                         , name =
                                                                             ()
                                                                         , typ =
                                                                             PolyType
                                                                               (TypeVariable
                                                                                  { location =
                                                                                      ()
                                                                                  , prefix =
                                                                                      ()
                                                                                  , index =
                                                                                      0
                                                                                  , kind =
                                                                                      TypeKind
                                                                                  })
                                                                         }
                                                                   , body =
                                                                       InfixExpression
                                                                         (Infix
                                                                            { location =
                                                                                ExpressionCursor
                                                                            , global =
                                                                                ApplyExpression
                                                                                  (Apply
                                                                                     { location =
                                                                                         ImplicitlyApplicationOn
                                                                                           (InfixOpCursor
                                                                                              ExpressionCursor)
                                                                                     , function =
                                                                                         GlobalExpression
                                                                                           (Global
                                                                                              { location =
                                                                                                  InfixOpCursor
                                                                                                    ExpressionCursor
                                                                                              , name =
                                                                                                  NumericBinOpGlobal
                                                                                                    AddOp
                                                                                              , scheme =
                                                                                                  ResolvedScheme
                                                                                                    (ApplyType
                                                                                                       (TypeApplication
                                                                                                          { function =
                                                                                                              ApplyType
                                                                                                                (TypeApplication
                                                                                                                   { function =
                                                                                                                       ConstantType
                                                                                                                         (TypeConstant
                                                                                                                            { location =
                                                                                                                                InfixOpCursor
                                                                                                                                  ExpressionCursor
                                                                                                                            , name =
                                                                                                                                FunctionTypeName
                                                                                                                            })
                                                                                                                   , argument =
                                                                                                                       PolyType
                                                                                                                         (TypeVariable
                                                                                                                            { location =
                                                                                                                                ()
                                                                                                                            , prefix =
                                                                                                                                ()
                                                                                                                            , index =
                                                                                                                                0
                                                                                                                            , kind =
                                                                                                                                TypeKind
                                                                                                                            })
                                                                                                                   , location =
                                                                                                                       InfixOpCursor
                                                                                                                         ExpressionCursor
                                                                                                                   , kind =
                                                                                                                       TypeKind
                                                                                                                   })
                                                                                                          , argument =
                                                                                                              PolyType
                                                                                                                (TypeVariable
                                                                                                                   { location =
                                                                                                                       ()
                                                                                                                   , prefix =
                                                                                                                       ()
                                                                                                                   , index =
                                                                                                                       0
                                                                                                                   , kind =
                                                                                                                       TypeKind
                                                                                                                   })
                                                                                                          , location =
                                                                                                              InfixOpCursor
                                                                                                                ExpressionCursor
                                                                                                          , kind =
                                                                                                              TypeKind
                                                                                                          }))
                                                                                              })
                                                                                     , argument =
                                                                                         VariableExpression
                                                                                           (Variable
                                                                                              { location =
                                                                                                  ImplicitArgumentFor
                                                                                                    (InfixOpCursor
                                                                                                       ExpressionCursor)
                                                                                              , name =
                                                                                                  DeBrujinIndex
                                                                                                    (DeBrujinNesting
                                                                                                       0)
                                                                                              , typ =
                                                                                                  ApplyType
                                                                                                    (TypeApplication
                                                                                                       { function =
                                                                                                           ApplyType
                                                                                                             (TypeApplication
                                                                                                                { function =
                                                                                                                    ConstantType
                                                                                                                      (TypeConstant
                                                                                                                         { location =
                                                                                                                             InfixOpCursor
                                                                                                                               ExpressionCursor
                                                                                                                         , name =
                                                                                                                             FunctionTypeName
                                                                                                                         })
                                                                                                                , argument =
                                                                                                                    PolyType
                                                                                                                      (TypeVariable
                                                                                                                         { location =
                                                                                                                             ()
                                                                                                                         , prefix =
                                                                                                                             ()
                                                                                                                         , index =
                                                                                                                             0
                                                                                                                         , kind =
                                                                                                                             TypeKind
                                                                                                                         })
                                                                                                                , location =
                                                                                                                    InfixOpCursor
                                                                                                                      ExpressionCursor
                                                                                                                , kind =
                                                                                                                    TypeKind
                                                                                                                })
                                                                                                       , argument =
                                                                                                           PolyType
                                                                                                             (TypeVariable
                                                                                                                { location =
                                                                                                                    ()
                                                                                                                , prefix =
                                                                                                                    ()
                                                                                                                , index =
                                                                                                                    0
                                                                                                                , kind =
                                                                                                                    TypeKind
                                                                                                                })
                                                                                                       , location =
                                                                                                           InfixOpCursor
                                                                                                             ExpressionCursor
                                                                                                       , kind =
                                                                                                           TypeKind
                                                                                                       })
                                                                                              })
                                                                                     , typ =
                                                                                         PolyType
                                                                                           (TypeVariable
                                                                                              { location =
                                                                                                  ()
                                                                                              , prefix =
                                                                                                  ()
                                                                                              , index =
                                                                                                  0
                                                                                              , kind =
                                                                                                  TypeKind
                                                                                              })
                                                                                     })
                                                                            , left =
                                                                                ApplyExpression
                                                                                  (Apply
                                                                                     { location =
                                                                                         AutogeneratedCursor
                                                                                     , function =
                                                                                         ApplyExpression
                                                                                           (Apply
                                                                                              { location =
                                                                                                  ImplicitlyApplicationOn
                                                                                                    AutogeneratedCursor
                                                                                              , function =
                                                                                                  GlobalExpression
                                                                                                    (Global
                                                                                                       { location =
                                                                                                           AutogeneratedCursor
                                                                                                       , name =
                                                                                                           FromIntegerGlobal
                                                                                                       , scheme =
                                                                                                           ResolvedScheme
                                                                                                             (ApplyType
                                                                                                                (TypeApplication
                                                                                                                   { function =
                                                                                                                       ApplyType
                                                                                                                         (TypeApplication
                                                                                                                            { function =
                                                                                                                                ConstantType
                                                                                                                                  (TypeConstant
                                                                                                                                     { location =
                                                                                                                                         AutogeneratedCursor
                                                                                                                                     , name =
                                                                                                                                         FunctionTypeName
                                                                                                                                     })
                                                                                                                            , argument =
                                                                                                                                ConstantType
                                                                                                                                  (TypeConstant
                                                                                                                                     { location =
                                                                                                                                         AutogeneratedCursor
                                                                                                                                     , name =
                                                                                                                                         IntegerTypeName
                                                                                                                                     })
                                                                                                                            , location =
                                                                                                                                AutogeneratedCursor
                                                                                                                            , kind =
                                                                                                                                FunKind
                                                                                                                                  TypeKind
                                                                                                                                  TypeKind
                                                                                                                            })
                                                                                                                   , argument =
                                                                                                                       PolyType
                                                                                                                         (TypeVariable
                                                                                                                            { location =
                                                                                                                                ()
                                                                                                                            , prefix =
                                                                                                                                ()
                                                                                                                            , index =
                                                                                                                                0
                                                                                                                            , kind =
                                                                                                                                TypeKind
                                                                                                                            })
                                                                                                                   , location =
                                                                                                                       AutogeneratedCursor
                                                                                                                   , kind =
                                                                                                                       TypeKind
                                                                                                                   }))
                                                                                                       })
                                                                                              , argument =
                                                                                                  VariableExpression
                                                                                                    (Variable
                                                                                                       { location =
                                                                                                           ImplicitArgumentFor
                                                                                                             AutogeneratedCursor
                                                                                                       , name =
                                                                                                           DeBrujinIndex
                                                                                                             (DeBrujinNesting
                                                                                                                1)
                                                                                                       , typ =
                                                                                                           ApplyType
                                                                                                             (TypeApplication
                                                                                                                { function =
                                                                                                                    ApplyType
                                                                                                                      (TypeApplication
                                                                                                                         { function =
                                                                                                                             ConstantType
                                                                                                                               (TypeConstant
                                                                                                                                  { location =
                                                                                                                                      AutogeneratedCursor
                                                                                                                                  , name =
                                                                                                                                      FunctionTypeName
                                                                                                                                  })
                                                                                                                         , argument =
                                                                                                                             ConstantType
                                                                                                                               (TypeConstant
                                                                                                                                  { location =
                                                                                                                                      AutogeneratedCursor
                                                                                                                                  , name =
                                                                                                                                      IntegerTypeName
                                                                                                                                  })
                                                                                                                         , location =
                                                                                                                             AutogeneratedCursor
                                                                                                                         , kind =
                                                                                                                             FunKind
                                                                                                                               TypeKind
                                                                                                                               TypeKind
                                                                                                                         })
                                                                                                                , argument =
                                                                                                                    PolyType
                                                                                                                      (TypeVariable
                                                                                                                         { location =
                                                                                                                             ()
                                                                                                                         , prefix =
                                                                                                                             ()
                                                                                                                         , index =
                                                                                                                             0
                                                                                                                         , kind =
                                                                                                                             TypeKind
                                                                                                                         })
                                                                                                                , location =
                                                                                                                    AutogeneratedCursor
                                                                                                                , kind =
                                                                                                                    TypeKind
                                                                                                                })
                                                                                                       })
                                                                                              , typ =
                                                                                                  PolyType
                                                                                                    (TypeVariable
                                                                                                       { location =
                                                                                                           ()
                                                                                                       , prefix =
                                                                                                           ()
                                                                                                       , index =
                                                                                                           0
                                                                                                       , kind =
                                                                                                           TypeKind
                                                                                                       })
                                                                                              })
                                                                                     , argument =
                                                                                         LiteralExpression
                                                                                           (NumberLiteral
                                                                                              (Number
                                                                                                 { location =
                                                                                                     InfixLeftCursor
                                                                                                       ExpressionCursor
                                                                                                 , number =
                                                                                                     IntegerNumber
                                                                                                       1
                                                                                                 , typ =
                                                                                                     ConstantType
                                                                                                       (TypeConstant
                                                                                                          { location =
                                                                                                              InfixLeftCursor
                                                                                                                ExpressionCursor
                                                                                                          , name =
                                                                                                              IntegerTypeName
                                                                                                          })
                                                                                                 }))
                                                                                     , typ =
                                                                                         PolyType
                                                                                           (TypeVariable
                                                                                              { location =
                                                                                                  ()
                                                                                              , prefix =
                                                                                                  ()
                                                                                              , index =
                                                                                                  0
                                                                                              , kind =
                                                                                                  TypeKind
                                                                                              })
                                                                                     })
                                                                            , right =
                                                                                ApplyExpression
                                                                                  (Apply
                                                                                     { location =
                                                                                         AutogeneratedCursor
                                                                                     , function =
                                                                                         ApplyExpression
                                                                                           (Apply
                                                                                              { location =
                                                                                                  ImplicitlyApplicationOn
                                                                                                    AutogeneratedCursor
                                                                                              , function =
                                                                                                  GlobalExpression
                                                                                                    (Global
                                                                                                       { location =
                                                                                                           AutogeneratedCursor
                                                                                                       , name =
                                                                                                           FromDecimalGlobal
                                                                                                       , scheme =
                                                                                                           ResolvedScheme
                                                                                                             (ApplyType
                                                                                                                (TypeApplication
                                                                                                                   { function =
                                                                                                                       ApplyType
                                                                                                                         (TypeApplication
                                                                                                                            { function =
                                                                                                                                ConstantType
                                                                                                                                  (TypeConstant
                                                                                                                                     { location =
                                                                                                                                         AutogeneratedCursor
                                                                                                                                     , name =
                                                                                                                                         FunctionTypeName
                                                                                                                                     })
                                                                                                                            , argument =
                                                                                                                                ApplyType
                                                                                                                                  (TypeApplication
                                                                                                                                     { function =
                                                                                                                                         ConstantType
                                                                                                                                           (TypeConstant
                                                                                                                                              { location =
                                                                                                                                                  AutogeneratedCursor
                                                                                                                                              , name =
                                                                                                                                                  DecimalTypeName
                                                                                                                                              })
                                                                                                                                     , argument =
                                                                                                                                         ConstantType
                                                                                                                                           (TypeConstant
                                                                                                                                              { location =
                                                                                                                                                  InfixRightCursor
                                                                                                                                                    ExpressionCursor
                                                                                                                                              , name =
                                                                                                                                                  NatTypeName
                                                                                                                                                    1
                                                                                                                                              })
                                                                                                                                     , location =
                                                                                                                                         AutogeneratedCursor
                                                                                                                                     , kind =
                                                                                                                                         TypeKind
                                                                                                                                     })
                                                                                                                            , location =
                                                                                                                                AutogeneratedCursor
                                                                                                                            , kind =
                                                                                                                                FunKind
                                                                                                                                  TypeKind
                                                                                                                                  TypeKind
                                                                                                                            })
                                                                                                                   , argument =
                                                                                                                       PolyType
                                                                                                                         (TypeVariable
                                                                                                                            { location =
                                                                                                                                ()
                                                                                                                            , prefix =
                                                                                                                                ()
                                                                                                                            , index =
                                                                                                                                0
                                                                                                                            , kind =
                                                                                                                                TypeKind
                                                                                                                            })
                                                                                                                   , location =
                                                                                                                       AutogeneratedCursor
                                                                                                                   , kind =
                                                                                                                       TypeKind
                                                                                                                   }))
                                                                                                       })
                                                                                              , argument =
                                                                                                  VariableExpression
                                                                                                    (Variable
                                                                                                       { location =
                                                                                                           ImplicitArgumentFor
                                                                                                             AutogeneratedCursor
                                                                                                       , name =
                                                                                                           DeBrujinIndex
                                                                                                             (DeBrujinNesting
                                                                                                                2)
                                                                                                       , typ =
                                                                                                           ApplyType
                                                                                                             (TypeApplication
                                                                                                                { function =
                                                                                                                    ApplyType
                                                                                                                      (TypeApplication
                                                                                                                         { function =
                                                                                                                             ConstantType
                                                                                                                               (TypeConstant
                                                                                                                                  { location =
                                                                                                                                      AutogeneratedCursor
                                                                                                                                  , name =
                                                                                                                                      FunctionTypeName
                                                                                                                                  })
                                                                                                                         , argument =
                                                                                                                             ApplyType
                                                                                                                               (TypeApplication
                                                                                                                                  { function =
                                                                                                                                      ConstantType
                                                                                                                                        (TypeConstant
                                                                                                                                           { location =
                                                                                                                                               AutogeneratedCursor
                                                                                                                                           , name =
                                                                                                                                               DecimalTypeName
                                                                                                                                           })
                                                                                                                                  , argument =
                                                                                                                                      ConstantType
                                                                                                                                        (TypeConstant
                                                                                                                                           { location =
                                                                                                                                               InfixRightCursor
                                                                                                                                                 ExpressionCursor
                                                                                                                                           , name =
                                                                                                                                               NatTypeName
                                                                                                                                                 1
                                                                                                                                           })
                                                                                                                                  , location =
                                                                                                                                      AutogeneratedCursor
                                                                                                                                  , kind =
                                                                                                                                      TypeKind
                                                                                                                                  })
                                                                                                                         , location =
                                                                                                                             AutogeneratedCursor
                                                                                                                         , kind =
                                                                                                                             FunKind
                                                                                                                               TypeKind
                                                                                                                               TypeKind
                                                                                                                         })
                                                                                                                , argument =
                                                                                                                    PolyType
                                                                                                                      (TypeVariable
                                                                                                                         { location =
                                                                                                                             ()
                                                                                                                         , prefix =
                                                                                                                             ()
                                                                                                                         , index =
                                                                                                                             0
                                                                                                                         , kind =
                                                                                                                             TypeKind
                                                                                                                         })
                                                                                                                , location =
                                                                                                                    AutogeneratedCursor
                                                                                                                , kind =
                                                                                                                    TypeKind
                                                                                                                })
                                                                                                       })
                                                                                              , typ =
                                                                                                  PolyType
                                                                                                    (TypeVariable
                                                                                                       { location =
                                                                                                           ()
                                                                                                       , prefix =
                                                                                                           ()
                                                                                                       , index =
                                                                                                           0
                                                                                                       , kind =
                                                                                                           TypeKind
                                                                                                       })
                                                                                              })
                                                                                     , argument =
                                                                                         LiteralExpression
                                                                                           (NumberLiteral
                                                                                              (Number
                                                                                                 { location =
                                                                                                     InfixRightCursor
                                                                                                       ExpressionCursor
                                                                                                 , number =
                                                                                                     DecimalNumber
                                                                                                       (Decimal
                                                                                                          { places =
                                                                                                              1
                                                                                                          , integer =
                                                                                                              10
                                                                                                          })
                                                                                                 , typ =
                                                                                                     ApplyType
                                                                                                       (TypeApplication
                                                                                                          { function =
                                                                                                              ConstantType
                                                                                                                (TypeConstant
                                                                                                                   { location =
                                                                                                                       InfixRightCursor
                                                                                                                         ExpressionCursor
                                                                                                                   , name =
                                                                                                                       DecimalTypeName
                                                                                                                   })
                                                                                                          , argument =
                                                                                                              ConstantType
                                                                                                                (TypeConstant
                                                                                                                   { location =
                                                                                                                       InfixRightCursor
                                                                                                                         ExpressionCursor
                                                                                                                   , name =
                                                                                                                       NatTypeName
                                                                                                                         1
                                                                                                                   })
                                                                                                          , location =
                                                                                                              InfixRightCursor
                                                                                                                ExpressionCursor
                                                                                                          , kind =
                                                                                                              TypeKind
                                                                                                          })
                                                                                                 }))
                                                                                     , typ =
                                                                                         PolyType
                                                                                           (TypeVariable
                                                                                              { location =
                                                                                                  ()
                                                                                              , prefix =
                                                                                                  ()
                                                                                              , index =
                                                                                                  0
                                                                                              , kind =
                                                                                                  TypeKind
                                                                                              })
                                                                                     })
                                                                            , typ =
                                                                                PolyType
                                                                                  (TypeVariable
                                                                                     { location =
                                                                                         ()
                                                                                     , prefix =
                                                                                         ()
                                                                                     , index =
                                                                                         0
                                                                                     , kind =
                                                                                         TypeKind
                                                                                     })
                                                                            })
                                                                   , typ =
                                                                       PolyType
                                                                         (TypeVariable
                                                                            { location =
                                                                                ()
                                                                            , prefix =
                                                                                ()
                                                                            , index =
                                                                                0
                                                                            , kind =
                                                                                TypeKind
                                                                            })
                                                                   })
                                                          , argument =
                                                              GlobalExpression
                                                                (Global
                                                                   { location =
                                                                       AutoInsertedForDefaulterCursor
                                                                   , name =
                                                                       InstanceGlobal
                                                                         (DecimalOpInstance
                                                                            1
                                                                            AddOp)
                                                                   , scheme =
                                                                       ResolvedScheme
                                                                         (ApplyType
                                                                            (TypeApplication
                                                                               { function =
                                                                                   ApplyType
                                                                                     (TypeApplication
                                                                                        { function =
                                                                                            ApplyType
                                                                                              (TypeApplication
                                                                                                 { function =
                                                                                                     ConstantType
                                                                                                       (TypeConstant
                                                                                                          { location =
                                                                                                              BuiltIn
                                                                                                          , name =
                                                                                                              DecimalTypeName
                                                                                                          })
                                                                                                 , argument =
                                                                                                     ConstantType
                                                                                                       (TypeConstant
                                                                                                          { location =
                                                                                                              BuiltIn
                                                                                                          , name =
                                                                                                              NatTypeName
                                                                                                                1
                                                                                                          })
                                                                                                 , location =
                                                                                                     BuiltIn
                                                                                                 , kind =
                                                                                                     TypeKind
                                                                                                 })
                                                                                        , argument =
                                                                                            ApplyType
                                                                                              (TypeApplication
                                                                                                 { function =
                                                                                                     ConstantType
                                                                                                       (TypeConstant
                                                                                                          { location =
                                                                                                              BuiltIn
                                                                                                          , name =
                                                                                                              DecimalTypeName
                                                                                                          })
                                                                                                 , argument =
                                                                                                     ConstantType
                                                                                                       (TypeConstant
                                                                                                          { location =
                                                                                                              BuiltIn
                                                                                                          , name =
                                                                                                              NatTypeName
                                                                                                                1
                                                                                                          })
                                                                                                 , location =
                                                                                                     BuiltIn
                                                                                                 , kind =
                                                                                                     TypeKind
                                                                                                 })
                                                                                        , location =
                                                                                            BuiltIn
                                                                                        , kind =
                                                                                            TypeKind
                                                                                        })
                                                                               , argument =
                                                                                   ApplyType
                                                                                     (TypeApplication
                                                                                        { function =
                                                                                            ConstantType
                                                                                              (TypeConstant
                                                                                                 { location =
                                                                                                     BuiltIn
                                                                                                 , name =
                                                                                                     DecimalTypeName
                                                                                                 })
                                                                                        , argument =
                                                                                            ConstantType
                                                                                              (TypeConstant
                                                                                                 { location =
                                                                                                     BuiltIn
                                                                                                 , name =
                                                                                                     NatTypeName
                                                                                                       1
                                                                                                 })
                                                                                        , location =
                                                                                            BuiltIn
                                                                                        , kind =
                                                                                            TypeKind
                                                                                        })
                                                                               , location =
                                                                                   BuiltIn
                                                                               , kind =
                                                                                   TypeKind
                                                                               }))
                                                                   })
                                                          , typ =
                                                              PolyType
                                                                (TypeVariable
                                                                   { location =
                                                                       ()
                                                                   , prefix = ()
                                                                   , index = 0
                                                                   , kind =
                                                                       TypeKind
                                                                   })
                                                          })
                                                 , typ =
                                                     PolyType
                                                       (TypeVariable
                                                          { location = ()
                                                          , prefix = ()
                                                          , index = 0
                                                          , kind = TypeKind
                                                          })
                                                 })
                                        , argument =
                                            GlobalExpression
                                              (Global
                                                 { location =
                                                     AutoInsertedForDefaulterCursor
                                                 , name =
                                                     InstanceGlobal
                                                       (FromIntegerDecimalInstance
                                                          1)
                                                 , scheme =
                                                     ResolvedScheme
                                                       (ApplyType
                                                          (TypeApplication
                                                             { function =
                                                                 ConstantType
                                                                   (TypeConstant
                                                                      { location =
                                                                          BuiltIn
                                                                      , name =
                                                                          IntegerTypeName
                                                                      })
                                                             , argument =
                                                                 ApplyType
                                                                   (TypeApplication
                                                                      { function =
                                                                          ConstantType
                                                                            (TypeConstant
                                                                               { location =
                                                                                   BuiltIn
                                                                               , name =
                                                                                   DecimalTypeName
                                                                               })
                                                                      , argument =
                                                                          ConstantType
                                                                            (TypeConstant
                                                                               { location =
                                                                                   BuiltIn
                                                                               , name =
                                                                                   NatTypeName
                                                                                     1
                                                                               })
                                                                      , location =
                                                                          BuiltIn
                                                                      , kind =
                                                                          TypeKind
                                                                      })
                                                             , location =
                                                                 BuiltIn
                                                             , kind = TypeKind
                                                             }))
                                                 })
                                        , typ =
                                            PolyType
                                              (TypeVariable
                                                 { location = ()
                                                 , prefix = ()
                                                 , index = 0
                                                 , kind = TypeKind
                                                 })
                                        })
                               , typ =
                                   PolyType
                                     (TypeVariable
                                        { location = ()
                                        , prefix = ()
                                        , index = 0
                                        , kind = TypeKind
                                        })
                               })
                      , argument =
                          GlobalExpression
                            (Global
                               { location = AutoInsertedForDefaulterCursor
                               , name =
                                   InstanceGlobal
                                     (FromDecimalDecimalInstance
                                        (FromDecimalInstance
                                           { supersetPlaces = 1
                                           , subsetPlaces = 1
                                           }))
                               , scheme =
                                   ResolvedScheme
                                     (ApplyType
                                        (TypeApplication
                                           { function =
                                               ApplyType
                                                 (TypeApplication
                                                    { function =
                                                        ConstantType
                                                          (TypeConstant
                                                             { location =
                                                                 BuiltIn
                                                             , name =
                                                                 DecimalTypeName
                                                             })
                                                    , argument =
                                                        ConstantType
                                                          (TypeConstant
                                                             { location =
                                                                 BuiltIn
                                                             , name =
                                                                 NatTypeName 1
                                                             })
                                                    , location = BuiltIn
                                                    , kind = TypeKind
                                                    })
                                           , argument =
                                               ApplyType
                                                 (TypeApplication
                                                    { function =
                                                        ConstantType
                                                          (TypeConstant
                                                             { location =
                                                                 BuiltIn
                                                             , name =
                                                                 DecimalTypeName
                                                             })
                                                    , argument =
                                                        ConstantType
                                                          (TypeConstant
                                                             { location =
                                                                 BuiltIn
                                                             , name =
                                                                 NatTypeName 1
                                                             })
                                                    , location = BuiltIn
                                                    , kind = TypeKind
                                                    })
                                           , location = BuiltIn
                                           , kind = TypeKind
                                           }))
                               })
                      , typ =
                          PolyType
                            (TypeVariable
                               { location = ()
                               , prefix = ()
                               , index = 0
                               , kind = TypeKind
                               })
                      })
             , scheme =
                 Scheme
                   { location = ExpressionCursor
                   , constraints = []
                   , typ =
                       ApplyType
                         (TypeApplication
                            { function =
                                ConstantType
                                  (TypeConstant
                                     { location = DefaultedCursor
                                     , name = DecimalTypeName
                                     })
                            , argument =
                                ConstantType
                                  (TypeConstant
                                     { location =
                                         InfixRightCursor ExpressionCursor
                                     , name = NatTypeName 1
                                     })
                            , location = DefaultedCursor
                            , kind = TypeKind
                            })
                   }
             , defaultedClassConstraints =
                 Seq.fromList
                   [ Default
                       { classConstraintDefaulted =
                           ClassConstraint
                             { className = FromDecimalClassName
                             , typ =
                                 ConstantType
                                   (TypeConstant
                                      { location =
                                          InfixRightCursor ExpressionCursor
                                      , name = NatTypeName 1
                                      }) :|
                                 [ ApplyType
                                     (TypeApplication
                                        { function =
                                            ConstantType
                                              (TypeConstant
                                                 { location = DefaultedCursor
                                                 , name = DecimalTypeName
                                                 })
                                        , argument =
                                            ConstantType
                                              (TypeConstant
                                                 { location =
                                                     InfixRightCursor
                                                       ExpressionCursor
                                                 , name = NatTypeName 1
                                                 })
                                        , location = DefaultedCursor
                                        , kind = TypeKind
                                        })
                                 ]
                             , location = AutogeneratedCursor
                             }
                       , classConstraintOriginal =
                           ClassConstraint
                             { className = FromDecimalClassName
                             , typ =
                                 ConstantType
                                   (TypeConstant
                                      { location =
                                          InfixRightCursor ExpressionCursor
                                      , name = NatTypeName 1
                                      }) :|
                                 [ VariableType
                                     (TypeVariable
                                        { location = ()
                                        , prefix = ()
                                        , index = 0
                                        , kind = TypeKind
                                        })
                                 ]
                             , location = AutogeneratedCursor
                             }
                       , instanceName =
                           FromDecimalDecimalInstance
                             (FromDecimalInstance
                                {supersetPlaces = 1, subsetPlaces = 1})
                       }
                   , Default
                       { classConstraintDefaulted =
                           ClassConstraint
                             { className = FromIntegerClassName
                             , typ =
                                 ApplyType
                                   (TypeApplication
                                      { function =
                                          ConstantType
                                            (TypeConstant
                                               { location = DefaultedCursor
                                               , name = DecimalTypeName
                                               })
                                      , argument =
                                          ConstantType
                                            (TypeConstant
                                               { location =
                                                   InfixRightCursor
                                                     ExpressionCursor
                                               , name = NatTypeName 1
                                               })
                                      , location = DefaultedCursor
                                      , kind = TypeKind
                                      }) :|
                                 []
                             , location = AutogeneratedCursor
                             }
                       , classConstraintOriginal =
                           ClassConstraint
                             { className = FromIntegerClassName
                             , typ =
                                 VariableType
                                   (TypeVariable
                                      { location = ()
                                      , prefix = ()
                                      , index = 0
                                      , kind = TypeKind
                                      }) :|
                                 []
                             , location = AutogeneratedCursor
                             }
                       , instanceName = FromIntegerDecimalInstance 1
                       }
                   , Default
                       { classConstraintDefaulted =
                           ClassConstraint
                             { className = AddOpClassName
                             , typ =
                                 ApplyType
                                   (TypeApplication
                                      { function =
                                          ConstantType
                                            (TypeConstant
                                               { location = DefaultedCursor
                                               , name = DecimalTypeName
                                               })
                                      , argument =
                                          ConstantType
                                            (TypeConstant
                                               { location =
                                                   InfixRightCursor
                                                     ExpressionCursor
                                               , name = NatTypeName 1
                                               })
                                      , location = DefaultedCursor
                                      , kind = TypeKind
                                      }) :|
                                 []
                             , location = InfixOpCursor ExpressionCursor
                             }
                       , classConstraintOriginal =
                           ClassConstraint
                             { className = AddOpClassName
                             , typ =
                                 VariableType
                                   (TypeVariable
                                      { location = ()
                                      , prefix = ()
                                      , index = 0
                                      , kind = TypeKind
                                      }) :|
                                 []
                             , location = InfixOpCursor ExpressionCursor
                             }
                       , instanceName = DecimalOpInstance 1 AddOp
                       }
                   ]
             , ambiguousClassConstraints = Seq.fromList []
             })))

spec_lambda :: SpecWith ()
spec_lambda =
  it
    "\\x -> x + x"
    (shouldBe
       (defaultText' mempty "" "\\x -> x + x")
       (Right
          (Cell
             { location = ExpressionCursor
             , expression =
                 LambdaExpression
                   (Lambda
                      { location =
                          ImplicitArgumentFor
                            (LambdaBodyCursor (InfixOpCursor ExpressionCursor))
                      , param =
                          Param
                            { location =
                                ImplicitArgumentFor
                                  (LambdaBodyCursor
                                     (InfixOpCursor ExpressionCursor))
                            , name = ()
                            , typ =
                                ApplyType
                                  (TypeApplication
                                     { function =
                                         ApplyType
                                           (TypeApplication
                                              { function =
                                                  ConstantType
                                                    (TypeConstant
                                                       { location =
                                                           ExpressionCursor
                                                       , name = FunctionTypeName
                                                       })
                                              , argument =
                                                  PolyType
                                                    (TypeVariable
                                                       { location = ()
                                                       , prefix = ()
                                                       , index = 0
                                                       , kind = TypeKind
                                                       })
                                              , location = ExpressionCursor
                                              , kind = FunKind TypeKind TypeKind
                                              })
                                     , argument =
                                         PolyType
                                           (TypeVariable
                                              { location = ()
                                              , prefix = ()
                                              , index = 0
                                              , kind = TypeKind
                                              })
                                     , location = ExpressionCursor
                                     , kind = TypeKind
                                     })
                            }
                      , body =
                          LambdaExpression
                            (Lambda
                               { location = ExpressionCursor
                               , param =
                                   Param
                                     { location = LambdaParamCursor
                                     , name = ()
                                     , typ =
                                         PolyType
                                           (TypeVariable
                                              { location = ()
                                              , prefix = ()
                                              , index = 0
                                              , kind = TypeKind
                                              })
                                     }
                               , body =
                                   InfixExpression
                                     (Infix
                                        { location =
                                            LambdaBodyCursor ExpressionCursor
                                        , global =
                                            ApplyExpression
                                              (Apply
                                                 { location =
                                                     ImplicitlyApplicationOn
                                                       (LambdaBodyCursor
                                                          (InfixOpCursor
                                                             ExpressionCursor))
                                                 , function =
                                                     GlobalExpression
                                                       (Global
                                                          { location =
                                                              LambdaBodyCursor
                                                                (InfixOpCursor
                                                                   ExpressionCursor)
                                                          , name =
                                                              NumericBinOpGlobal
                                                                AddOp
                                                          , scheme =
                                                              ResolvedScheme
                                                                (ApplyType
                                                                   (TypeApplication
                                                                      { function =
                                                                          ApplyType
                                                                            (TypeApplication
                                                                               { function =
                                                                                   ConstantType
                                                                                     (TypeConstant
                                                                                        { location =
                                                                                            LambdaBodyCursor
                                                                                              (InfixOpCursor
                                                                                                 ExpressionCursor)
                                                                                        , name =
                                                                                            FunctionTypeName
                                                                                        })
                                                                               , argument =
                                                                                   PolyType
                                                                                     (TypeVariable
                                                                                        { location =
                                                                                            ()
                                                                                        , prefix =
                                                                                            ()
                                                                                        , index =
                                                                                            0
                                                                                        , kind =
                                                                                            TypeKind
                                                                                        })
                                                                               , location =
                                                                                   LambdaBodyCursor
                                                                                     (InfixOpCursor
                                                                                        ExpressionCursor)
                                                                               , kind =
                                                                                   TypeKind
                                                                               })
                                                                      , argument =
                                                                          PolyType
                                                                            (TypeVariable
                                                                               { location =
                                                                                   ()
                                                                               , prefix =
                                                                                   ()
                                                                               , index =
                                                                                   0
                                                                               , kind =
                                                                                   TypeKind
                                                                               })
                                                                      , location =
                                                                          LambdaBodyCursor
                                                                            (InfixOpCursor
                                                                               ExpressionCursor)
                                                                      , kind =
                                                                          TypeKind
                                                                      }))
                                                          })
                                                 , argument =
                                                     VariableExpression
                                                       (Variable
                                                          { location =
                                                              ImplicitArgumentFor
                                                                (LambdaBodyCursor
                                                                   (InfixOpCursor
                                                                      ExpressionCursor))
                                                          , name =
                                                              DeBrujinIndex
                                                                (DeBrujinNesting
                                                                   1)
                                                          , typ =
                                                              ApplyType
                                                                (TypeApplication
                                                                   { function =
                                                                       ApplyType
                                                                         (TypeApplication
                                                                            { function =
                                                                                ConstantType
                                                                                  (TypeConstant
                                                                                     { location =
                                                                                         LambdaBodyCursor
                                                                                           (InfixOpCursor
                                                                                              ExpressionCursor)
                                                                                     , name =
                                                                                         FunctionTypeName
                                                                                     })
                                                                            , argument =
                                                                                PolyType
                                                                                  (TypeVariable
                                                                                     { location =
                                                                                         ()
                                                                                     , prefix =
                                                                                         ()
                                                                                     , index =
                                                                                         0
                                                                                     , kind =
                                                                                         TypeKind
                                                                                     })
                                                                            , location =
                                                                                LambdaBodyCursor
                                                                                  (InfixOpCursor
                                                                                     ExpressionCursor)
                                                                            , kind =
                                                                                TypeKind
                                                                            })
                                                                   , argument =
                                                                       PolyType
                                                                         (TypeVariable
                                                                            { location =
                                                                                ()
                                                                            , prefix =
                                                                                ()
                                                                            , index =
                                                                                0
                                                                            , kind =
                                                                                TypeKind
                                                                            })
                                                                   , location =
                                                                       LambdaBodyCursor
                                                                         (InfixOpCursor
                                                                            ExpressionCursor)
                                                                   , kind =
                                                                       TypeKind
                                                                   })
                                                          })
                                                 , typ =
                                                     PolyType
                                                       (TypeVariable
                                                          { location = ()
                                                          , prefix = ()
                                                          , index = 0
                                                          , kind = TypeKind
                                                          })
                                                 })
                                        , left =
                                            VariableExpression
                                              (Variable
                                                 { location =
                                                     LambdaBodyCursor
                                                       (InfixLeftCursor
                                                          ExpressionCursor)
                                                 , name =
                                                     DeBrujinIndex
                                                       (DeBrujinNesting 0)
                                                 , typ =
                                                     PolyType
                                                       (TypeVariable
                                                          { location = ()
                                                          , prefix = ()
                                                          , index = 0
                                                          , kind = TypeKind
                                                          })
                                                 })
                                        , right =
                                            VariableExpression
                                              (Variable
                                                 { location =
                                                     LambdaBodyCursor
                                                       (InfixRightCursor
                                                          ExpressionCursor)
                                                 , name =
                                                     DeBrujinIndex
                                                       (DeBrujinNesting 0)
                                                 , typ =
                                                     PolyType
                                                       (TypeVariable
                                                          { location = ()
                                                          , prefix = ()
                                                          , index = 0
                                                          , kind = TypeKind
                                                          })
                                                 })
                                        , typ =
                                            PolyType
                                              (TypeVariable
                                                 { location = ()
                                                 , prefix = ()
                                                 , index = 0
                                                 , kind = TypeKind
                                                 })
                                        })
                               , typ =
                                   ApplyType
                                     (TypeApplication
                                        { function =
                                            ApplyType
                                              (TypeApplication
                                                 { function =
                                                     ConstantType
                                                       (TypeConstant
                                                          { location =
                                                              ExpressionCursor
                                                          , name =
                                                              FunctionTypeName
                                                          })
                                                 , argument =
                                                     PolyType
                                                       (TypeVariable
                                                          { location = ()
                                                          , prefix = ()
                                                          , index = 0
                                                          , kind = TypeKind
                                                          })
                                                 , location = ExpressionCursor
                                                 , kind =
                                                     FunKind TypeKind TypeKind
                                                 })
                                        , argument =
                                            PolyType
                                              (TypeVariable
                                                 { location = ()
                                                 , prefix = ()
                                                 , index = 0
                                                 , kind = TypeKind
                                                 })
                                        , location = ExpressionCursor
                                        , kind = TypeKind
                                        })
                               })
                      , typ =
                          ApplyType
                            (TypeApplication
                               { function =
                                   ApplyType
                                     (TypeApplication
                                        { function =
                                            ConstantType
                                              (TypeConstant
                                                 { location = ExpressionCursor
                                                 , name = FunctionTypeName
                                                 })
                                        , argument =
                                            PolyType
                                              (TypeVariable
                                                 { location = ()
                                                 , prefix = ()
                                                 , index = 0
                                                 , kind = TypeKind
                                                 })
                                        , location = ExpressionCursor
                                        , kind = FunKind TypeKind TypeKind
                                        })
                               , argument =
                                   PolyType
                                     (TypeVariable
                                        { location = ()
                                        , prefix = ()
                                        , index = 0
                                        , kind = TypeKind
                                        })
                               , location = ExpressionCursor
                               , kind = TypeKind
                               })
                      })
             , scheme =
                 Scheme
                   { location = ExpressionCursor
                   , constraints =
                       [ ClassConstraint
                           { className = AddOpClassName
                           , typ =
                               VariableType
                                 (TypeVariable
                                    { location = ()
                                    , prefix = ()
                                    , index = 0
                                    , kind = TypeKind
                                    }) :|
                               []
                           , location =
                               LambdaBodyCursor (InfixOpCursor ExpressionCursor)
                           }
                       ]
                   , typ =
                       ApplyType
                         (TypeApplication
                            { function =
                                ApplyType
                                  (TypeApplication
                                     { function =
                                         ConstantType
                                           (TypeConstant
                                              { location = ExpressionCursor
                                              , name = FunctionTypeName
                                              })
                                     , argument =
                                         VariableType
                                           (TypeVariable
                                              { location = ()
                                              , prefix = ()
                                              , index = 0
                                              , kind = TypeKind
                                              })
                                     , location = ExpressionCursor
                                     , kind = FunKind TypeKind TypeKind
                                     })
                            , argument =
                                VariableType
                                  (TypeVariable
                                     { location = ()
                                     , prefix = ()
                                     , index = 0
                                     , kind = TypeKind
                                     })
                            , location = ExpressionCursor
                            , kind = TypeKind
                            })
                   }
             , defaultedClassConstraints = Seq.fromList []
             , ambiguousClassConstraints = Seq.fromList []
             })))
