variables:
  STACK_ROOT: "${CI_PROJECT_DIR}/.stack-root"

stages:
  - build

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID               # Execute jobs in merge request context
    - if: $CI_COMMIT_BRANCH == 'master'      # Execute jobs when a new commit is pushed to master branch

patch:
  stage: build
  image: docker:stable
  when: manual
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
    - IMAGE="${CI_REGISTRY_IMAGE}/patch:${CI_PIPELINE_ID}"
    - docker image build . -f sky-above/inflex/patch.Dockerfile -t "$IMAGE"
    - docker push "$IMAGE"

# stages:
#   - build
#   - release

# build:
#   when: manual
#   image: registry.gitlab.com/sky-above/inflex/build@sha256:9fcd97c1deb8274e1dd829934e532de06e7555aa90760ca05a9c7f43cc40dfd9
#   stage: build
#   script:
#     # - "stack test --fast"
#     - "mkdir build"
#     - "stack build --force-dirty --ghc-options=-O --copy-bins inflex-server --local-bin-path=build"
#   artifacts:
#     paths:
#       - build

# release:
#   when: manual
#   stage: release
#   image: docker:stable
#   services:
#     - docker:dind
#   dependencies:
#     - build
#   script:
#     - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
#     - docker image build . -f docker/deploy.Dockerfile -t "${CI_REGISTRY_IMAGE}:pipeline-${CI_PIPELINE_ID}"
#     - docker push "${CI_REGISTRY_IMAGE}:pipeline-${CI_PIPELINE_ID}"
