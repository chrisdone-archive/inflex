variables:
  STACK_ROOT: "${CI_PROJECT_DIR}/.stack-root"

stages:
  - env
  - build
  - deploy

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID               # Execute jobs in merge request context
    - if: $CI_COMMIT_BRANCH == 'master'      # Execute jobs when a new commit is pushed to master branch

patch:
  stage: env
  image: docker:stable
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[patch]/
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
    - IMAGE="${CI_REGISTRY_IMAGE}/patch:${CI_PIPELINE_ID}"
    - docker image build . -f docker/sky-above/inflex/patch.Dockerfile -t "$IMAGE"
    - docker push "$IMAGE"

build-prod:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[prod]/
  script:
    - sed -i.bak "s/git@gitlab.com:/https:\/\/gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com\//" stack.yaml
    - IMAGE="${CI_REGISTRY_IMAGE}/prod:${CI_PIPELINE_ID}"
    - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
    - date
    - docker image build . -f docker/sky-above/inflex/prod.Dockerfile -t "$IMAGE"
    - date
    - docker push "$IMAGE"
    - date

kube-update:
  stage: deploy
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[prod]/
  image: ubuntu

  before_script:
    - apt-get update -y && apt-get install git -y
    - git config --global user.email "gitlab@inflex.io"
    - git config --global user.name "GitLab runner"

  script:
  - sed -E "s/\/prod:[0-9]+$/\/prod:$CI_PIPELINE_ID/" kube/inflex-server.yaml -i
  - git add kube/inflex-server.yaml
  - git commit -m "Update kube/inflex-server.yaml to $CI_PIPELINE_ID [kube-apply]"
  - git push "https://gitlab-ci-token:$GITLAB_PUSH_TOKEN@gitlab.com/sky-above/inflex.git" HEAD:$CI_COMMIT_BRANCH

kube-apply:
  stage: deploy
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[kube-apply]/
  image: ubuntu

  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" > keyfile.txt
    - chmod 700 keyfile.txt
    - echo "$SSH_KEY_PASS" | ssh-add keyfile.txt

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    ##
    - ssh-keyscan 46.101.49.42 >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

  script:
  - scp kube/* rancher@46.101.49.42:kube/
  - ssh rancher@46.101.49.42 ./kubectl apply -f kube
